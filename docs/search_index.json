[
["index.html", "Inteligencia Artificial aplicada a Negocios y Empresas Traducido al castellano por Juan Gabriel Gomila Introducción", " Inteligencia Artificial aplicada a Negocios y Empresas Traducido al castellano por Juan Gabriel Gomila Hadelin de Ponteves y Kirill Ermenko 2020-03-22 Introducción Este libro es el complemento de nuestro curso online Inteligencia Artificial aplicada a Negocios y Empresas disponible en Udemy. Cubre los tres casos prácticos de empresa reales que se resuelven, cada uno de ellos, con una técnica diferente del mundo de la inteligencia artificial: Part Case Study AI Solution 1 - Optimización de Procesos Optimizar el flujo en los almacenes de un ecommerce Q-Learning 2 - Minimización de Costes Minimizar los gastos de energía del servidor de un centro de datos Deep Q-Learning 3 - Maximización de Beneficios Mazimizar los beneficios de un negocio online de venta al por menor Muestreo Thompson En cada una de esas partes, seguiremos el mismo esquema de tres pasos: Caso Práctico Comenzaremos explicando el problema que tenemos que resolver y construiremos desde cero el entorno en el que trabajaremos. AI Solution. Te daremos no solo la teoría general sino también todos los detalles matemáticos del modelo de IA que resolverán el caso práctico Implementation. Implementaremos toda la solución de inteligencia artificial en Python, lo pondremos en producción y mejoraremos la inteligencia artificial al completar tareas adicionales al final. ¡Muchas gracias a todos por unirte a nosotros en este curso, te deseo sin duda un emocionante viaje al mundo de la IA aplicada a Negocios y Empresas con nosotros! "],
["optimización-de-procesos.html", "Parte 1 Optimización de Procesos 1.1 Caso Práctico: Optimización de tareas en un almacén de comercio electrónico 1.2 Solución de Inteligencia Artificial 1.3 Implementación", " Parte 1 Optimización de Procesos Aquí vamos con nuestro primer caso práctico y nuestro primer modelo de IA. ¡Esperamos que estés listo! 1.1 Caso Práctico: Optimización de tareas en un almacén de comercio electrónico 1.1.1 Problema a resolver El problema a resolver será optimizar los flujos dentro del siguiente almacén: El almacén pertenece a una empresa online minorista que vende productos a una variedad de clientes. Dentro de este almacén, los productos se almacenan en 12 ubicaciones diferentes, etiquetadas con las siguientes letras de la A a la L: A medida que los clientes hacen los pedidos online, un robot de almacén autónomo se mueve por el almacén para recoger los productos para futuras entregas. Así es como se ve: Autonomous Warehouse Robot Las 12 ubicaciones están conectadas a un sistema informático, que clasifica en tiempo real las prioridades de recolección de productos para estas 12 ubicaciones. Por ejemplo, en un momento específico \\(t\\), devolverá la siguiente clasificación: Rango de Prioridad Ubicación 1 G 2 K 3 L 4 J 5 A 6 I 7 H 8 C 9 B 10 D 11 F 12 E La ubicación G tiene prioridad 1, lo que significa que es la máxima prioridad, ya que contiene un producto que debe recogerse y entregarse de inmediato. Nuestro robot de almacén autónomo debe moverse a la ubicación G por la ruta más corta, dependiendo de dónde se encuentre. Nuestro objetivo es construir una IA que regrese esa ruta más corta, donde sea que esté el robot. Pero luego, como vemos, las ubicaciones K y L están en las 3 prioridades principales. Por lo tanto, querremos implementar una opción para que nuestro Robot de almacén autónomo pase por algunas ubicaciones intermedias antes de llegar a su ubicación final de máxima prioridad. La forma en que el sistema calcula las prioridades de las ubicaciones está fuera del alcance de este caso práctico. La razón de esto es que puede haber muchas formas, desde reglas o algoritmos simples, hasta cálculos deterministas y aprendizaje automático. Pero la mayoría de estas formas no serían inteligencia artificial como la conocemos hoy. En lo que realmente queremos centrarnos es en la IA central, que abarca Q-Learning, Deep Q-Learning y otras ramas de Reinforcement Learning. Entonces, solo diremos, por ejemplo, que la ubicación G es la máxima prioridad porque uno de los clientes de platino más leales de la compañía hizo un pedido urgente de un producto almacenado en la ubicación G, que por lo tanto debe entregarse lo antes posible. Por lo tanto, en conclusión, nuestra misión es construir una IA que siempre tome la ruta más corta a la ubicación de máxima prioridad, sea cual sea la ubicación desde la que comienza, y tener la opción de ir a una ubicación intermedia que se encuentre entre las 3 prioridades principales. 1.1.2 Entorno a definir Al construir una IA, lo primero que siempre tenemos que hacer es definir el entorno. Y definir un entorno siempre requiere los tres elementos siguientes: Definir los estados Definir las acciones Definir las recompensas Definamos estos tres elementos, uno por uno. Definir los estados. Comencemos con los estados. El estado de entrada es simplemente la ubicación donde está nuestro Robot de almacén autónomo en cada momento \\(t\\). Sin embargo, dado que construiremos nuestra IA con ecuaciones matemáticas, codificaremos los nombres de las ubicaciones (A, B, C, …) en números de índice, con respecto a la siguiente asignación: Ubicación Estado A 0 B 1 C 2 D 3 E 4 F 5 G 6 H 7 I 8 J 9 K 10 L 11 Hay una razón específica por la que codificamos los estados con índices del 0 al 11, en lugar de otros enteros. La razón es que trabajaremos con matrices, una matriz de recompensas y una matriz de valores Q, y cada línea y columna de estas matrices corresponderá a una ubicación específica. Por ejemplo, la primera línea de cada matriz, que tiene el índice 0, corresponde a la ubicación A. La segunda línea / columna, que tiene el índice 1, corresponde a la ubicación B. Etc. Veremos el propósito de trabajar con matrices con más detalles. un poco más tarde. Definir las acciones. Ahora definamos las posibles acciones a realizar Las acciones son simplemente los siguientes movimientos que el robot puede hacer para ir de un lugar a otro. Entonces, por ejemplo, digamos que el robot está en la ubicación J, las posibles acciones que el robot puede llevar a cabo es ir a I, F o K. Y nuevamente, ya que trabajaremos con ecuaciones matemáticas, codificaremos estas acciones con los mismos índices que para los estados. Por lo tanto, siguiendo nuestro mismo ejemplo donde el robot está en la ubicación J en un momento específico, las posibles acciones que el robot puede jugar son, de acuerdo con nuestro mapeo anterior anterior: 5, 8 y 10. De hecho, el índice 5 corresponde a F, el índice 8 corresponde a I y el índice 10 corresponde a K. Por lo tanto, eventualmente, la lista total de acciones que la IA puede llevar a cabo en general es la siguiente: \\[actions = [0,1,2,3,4,5,6,7,8,9,10,11]\\] Obviamente, al estar en una ubicación específica, hay algunas acciones que el robot no puede llevar a cabo. Tomando el mismo ejemplo anterior, si el robot está en la ubicación J, puede ejecutar las acciones 5, 8 y 10, pero no puede ejecutar las otras acciones. Nos aseguraremos de especificar eso al atribuir una recompensa 0 a las acciones que no puede llevar a cabo, y una recompensa 1 a las acciones que si puede realizar. Y eso nos lleva a las recompensas. Definir las recompensas. Lo último que tenemos que hacer ahora para construir nuestro entorno es definir un sistema de recompensas. Más específicamente, tenemos que definir una función de recompensa \\(R\\) que toma como entradas un estado \\(s\\) y una acción \\(a\\), y devuelve una recompensa numérica que la IA obtendrá al llevar a cabo la acción \\(a\\) en el estado \\(s\\): \\[R : (\\textrm{state}, \\textrm{action}) \\mapsto r \\in \\mathbb{R}\\] Entonces, ¿cómo vamos a construir esa función para nuestro caso práctico? Aquí esto es simple. Dado que hay un número discreto y finito de estados (los índices de 0 a 11), así como un número discreto y finito de acciones (mismos índices de 0 a 11), la mejor manera de construir nuestra función de recompensa R es simplemente hacer una matriz. Nuestra función de recompensa será exactamente una matriz de 12 filas y 12 columnas, donde las filas corresponden a los estados y las columnas corresponden a las acciones. De esa forma, en nuestra función $R: (s, a) r in $, \\(s\\) será el índice de la fila de la matriz, \\(a\\) será el índice de la columna de matriz, y \\(r\\) será la celda de los índices \\((s, a)\\) en la matriz. Por lo tanto, lo único que tenemos que hacer ahora para definir nuestra función de recompensa es simplemente llenar esta matriz con las recompensas numéricas. Y como acabamos de decir en el párrafo anterior, lo que tenemos que hacer primero es atribuir, para cada una de las 12 ubicaciones, una recompensa 0 por las acciones que el robot no puede ejecutar, y una recompensa 1 por las acciones que el robot puede llevar a cabo. Al hacer eso para cada una de las 12 ubicaciones, terminaremos con una matriz de recompensas. Vamos a construirlo paso a paso, comenzando con la primera ubicación: Ubicación A. Cuando se encuentra en la ubicación A, el robot solo puede ir a la ubicación B. Por lo tanto, dado que la ubicación A tiene el índice 0 (primera fila de la matriz) y la ubicación B tiene el índice 1 (segunda columna de la matriz), la primera fila de la matriz de las recompensas obtendrá un 1 en la segunda columna y un 0 en todas las otras columnas, así: Ubicación B. Al estar en la ubicación B, el robot solo puede ir a tres ubicaciones diferentes: A, C y F. Dado que B tiene el índice 1 (segunda fila), y A, C, F tienen los índices respectivos 0, 2, 5 (1ra, 3ra. , y sexta columna), entonces la segunda fila de la matriz de recompensas obtendrá un 1 en las columnas 1a, 3a y 6a, y 0 en todas las otras columnas. Por lo tanto obtenemos: Ubicación C. Ocurre lo mismo, la ubicación C (de índice 2) solo está conectada a B y G (de índices 1 y 6), por lo que la tercera fila de la matriz de recompensas es: En el resto de ubicaciones… Al hacer lo mismo para todas las demás ubicaciones, finalmente obtenemos nuestra matriz final de recompensas: Felicidades, acabamos de definir las recompensas. Lo hicimos simplemente construyendo esta matriz de recompensas. Es importante entender que esta es la forma en que definimos el sistema de recompensas cuando hacemos Q-Learning con un número finito de entradas y acciones. En el Caso Práctico 2, veremos que procederemos de manera muy diferente. Ya casi hemos terminado, lo único que tenemos que hacer es atribuir grandes recompensas a las ubicaciones de mayor prioridad. Esto lo hará el sistema informático que devuelve las prioridades de recolección de productos para cada una de las 12 ubicaciones. Por lo tanto, dado que la ubicación G es la máxima prioridad, el sistema informático actualizará la matriz de recompensas atribuyendo una alta recompensa en la celda \\((G, G)\\): Y así es como el sistema de recompensas funcionará con Q-Learning. Atribuimos la recompensa más alta (aquí 1000) a la ubicación de máxima prioridad G. Luego puedes ver en las clases de vídeo del curso cómo podemos atribuir una recompensa más alta a la segunda ubicación de mayor prioridad (ubicación K), para hacer que nuestro robot pase por esto ubicación intermedia de máxima prioridad, optimizando así los flujos de movimiento por el almacén. 1.2 Solución de Inteligencia Artificial The AI Solution that will solve the problem described above is a Q-Learning model. Since the latter is based on Markov Decision Processes, or MDPs, we will start by explaining what they are, and then we will move on to the intuition and maths details behind the Q-Learning model. 1.2.1 Proceso de Decisión de Markov Un Proceso de Decisión de Markov es una tupla \\((S, A, T, R)\\) donde: \\(S\\) es el conjunto de los diferentes estados. Por lo tanto, en nuestro caso de estudio: \\[S = \\{0,1,2,3,4,5,6,7,8,9,10,11\\}\\] \\(A\\) es el conjunto de las diferentes acciones que se pueden llevar a cabo en cada momento \\(t\\). Por lo tanto, en nuestro caso de estudio: \\[A = \\{0,1,2,3,4,5,6,7,8,9,10,11\\}\\] \\(T\\) es la llamada regla de transición: \\[T : (s_t \\in S, s_{t+1} \\in S, a_t \\in A) \\mapsto \\mathbb{P}(s_{t+1}|s_t,a_t)\\] donde \\(\\mathbb {P} (s_{t + 1} | s_t, a_t)\\) es la probabilidad de alcanzar el estado futuro \\(s_{t + 1}\\) cuando se lleva a cabo la acción \\(a_t\\) en el estado \\(s_t\\). Por lo tanto, \\(T\\) es la distribución de probabilidad de los estados futuros en el tiempo \\(t + 1\\) dado el estado actual y la acción ejecutada en el tiempo \\(t\\). En consecuencia, podemos predecir el estado futuro \\(s_{t + 1}\\) tomando un valor aleatorio de esa distribución \\(T\\): \\[s_{t+1} \\sim T(s_t,.,a_t)\\] En nuestro estudio de caso, verás a través de nuestra implementación que esta distribución \\(T\\) de nuestra IA simplemente será la distribución uniforme, que es una opción clásica de distribución que funciona muy bien en el marco del Q-Learning. \\(R\\) es la función de recompensas: \\[R : (s_t \\in S, a_t \\in A) \\mapsto r_t \\in \\mathbb{R}\\] donde \\(r_t\\) es la recompensa obtenida después de ejecutar la acción \\(a_t\\) en el estado \\(s_t\\). En nuestro caso práctico, esta función de recompensa es exactamente la matriz que definimos previamente. Después de definir el proceso de decisión de Markov, ahora es importante recordar que se basa en el siguiente supuesto: la probabilidad del estado futuro \\(s_{t + 1}\\) solamente depende del estado actual \\(s_t\\) y la acción ejecutada \\(a_t\\), y bajo ningun concepto no depende de ninguno de los estados y acciones anteriores. Es decir: \\[\\mathbb{P}(s_{t+1}|s_0,a_0,s_1,a_1,...,s_t,a_t) = \\mathbb{P}(s_{t+1}|s_t,a_t)\\] En otras palabras, un proceso de decisión de Markov no tiene memoria. Ahora repasemos lo que va a ocurrir en términos de un proceso de decisión de Markov. En cada instante \\(t\\): La IA observa el estado actual \\(s_t\\). La IA ejecuta la acción \\(a_t\\). La IA recibe la recompensa \\(r_t = R(s_t, a_t)\\). La IA entra en el siguiente estado \\(s_{t+1}\\). Así que la pregunta clave es: ¿Cómo sabe la IA qué acción llevar a cabo en cada instante \\(t\\)? Para responder a esta pregunta, necesitamos introducir la función de política. La función de política \\(\\pi\\) es exactamente la función que, dado un estado \\(s_t\\), devuelve la acción \\(a_t\\): \\[\\pi: s_t \\in S \\mapsto a_t \\in A\\] Denotemos por \\(\\Pi\\) el conjunto de todas las funciones de política posibles. Entonces, la elección de las mejores acciones para jugar se convierte en un problema de optimización. De hecho, se trata de encontrar la política óptima \\(\\pi^*\\) que maximice la recompensa acumulada: \\[\\pi^* = \\underset{\\pi \\in \\Pi}{\\textrm{argmax}} \\sum_{t \\ge 0} R(s_t,\\pi(s_t))\\] Por lo tanto, la pregunta anterior se convierte en: ¿Cómo encontrar esta política óptima \\(\\pi^*\\)? Aquí es donde entra en juego el Q-Learning. 1.2.2 Q-Learning Antes de comenzar a entrar en los detalles de Q-Learning, necesitamos explicar el concepto del valor Q. El valor Q Para cada par de estado y acción \\((s, a)\\), vamos a asociar un valor numérico llamado \\(Q (s, a)\\): \\[Q: (s \\in S, a \\in A) \\mapsto Q(s,a) \\in \\mathbb{R}\\] Diremos que \\(Q (s, a)\\) es el valor Q de la acción \\(a\\) llevada a cabo en el estado \\(s\\). Para comprender el propósito de este Valor Q, necesitamos introducir la Diferencia Temporal. La Diferencia Temporal Al principio \\(t = 0\\), todos los valores Q se inicializan a 0: \\[\\forall s \\in S, a \\in A, Q(s,a) = 0\\] Ahora supongamos que estamos en el instante \\(t\\), en cierto estado \\(s_t\\). Llevamos a cabo una acción aleatoria \\(a_t\\), que nos lleva al estado \\(s_{t + 1}\\) y obtenemos la recompensa \\(R(s_t, a_t)\\). Ahora podemos presentar la diferencia temporal, que básicamente es el corazón de Q-Learning. La diferencia temporal en el tiempo \\(t\\), denotada por \\(TD_t(s_t, a_t)\\), es la diferencia entre: \\(R(s_t,a_t) + \\gamma \\underset{a}{\\max}(Q(s_{t+1},a))\\), es decir la recompensa \\(R (s_t, a_t)\\) obtenida al llevar a cabo la acción \\(a_t\\) en el estado \\(s_t\\), más el valor Q de la mejor acción jugada en el estado futuro \\(s_{t + 1}\\), descontado por un factor $$, llamado factor de descuento. y \\(Q(s_t, a_t)\\), es decir el valor Q de la acción \\(a_t\\) llevada a cabo en el estado $ s_t $, que nos lleva a: \\[TD_t(s_t,a_t) = R(s_t,a_t) + \\gamma \\underset{a}{\\max}(Q(s_{t+1},a)) - Q(s_t,a_t)\\] Bien, genial, pero ¿cuál es exactamente el propósito de esta diferencia temporal \\(TD_t(s_t,a_t)\\)? Respondamos esta pregunta para darnos una mejor idea de la IA. \\(TD_t (s_t, a_t)\\) es como una recompensa intrínseca. La IA aprenderá los valores Q de tal manera que: Si \\(TD_t(s_t,a_t)\\) es alta, la IA recibe una buena sorpresa. Si \\(TD_t(s_t,a_t)\\) es alta, la IA recibe frustración. En ese sentido, la IA repetirá algunas actualizaciones de los valores Q (a través de una ecuación llamada la ecuación de Bellman) hacia diferencias temporales más altas. En consecuencia, en el siguiente paso final del algoritmo Q-Learning, usamos la diferencia temporal para reforzar los pares (estado, acción) desde el tiempo \\(t-1\\) hasta el tiempo \\(t\\), de acuerdo con la siguiente ecuación: \\[Q_t(s_t,a_t) = Q_{t-1}(s_t,a_t) + \\alpha TD_t(s_t,a_t)\\] donde \\(\\alpha \\in \\mathbb{R}\\) es la tasa de aprendizaje, que determina qué tan rápido va el aprendizaje de los valores Q o qué tan grandes son las actualizaciones de los mismos. Su valor suele ser un número real elegido entre 0 y 1, como por ejemplo 0.01, 0.05, 0.1 o 0.5. Cuanto menor sea su valor, más pequeñas serán las actualizaciones de los valores Q y más larga será la ejecución del algoritmo de Q-Learning. Cuanto mayor sea su valor, mayores serán las actualizaciones de los valores Q y más rápido será el algoritmo de Q-Learning. Esta ecuación anterior es la ecuación de Bellman. Es el pilar fundamental del Q-Learning. Con este punto de vista, los valores Q miden la acumulación de sorpresa o frustración asociada con el par de acciones y estados \\((s_t, a_t)\\). En el caso de recibir sorpresa, la IA se refuerza, y en el caso de recibir frustración, la IA se debilita. Por lo tanto, queremos aprender los valores Q que le darán a la IA la máxima buena sorpresa. En consecuencia, la decisión de qué acción ejecutar depende principalmente del valor Q \\(Q(s_t, a_t)\\). Si la acción \\(a_t\\) ejecutada en el estado \\(s_t\\) está asociada con un valor Q alto \\(Q (s_t, a_t)\\), la IA tendrá una mayor tendencia a elegir la acción \\(a_t\\). Por otro lado, si la acción \\(a_t\\) que se ha llevado a cabo en el estado \\(s_t\\) está asociada con un valor Q pequeño \\(Q(s_t, a_t)\\), la IA tendrá una tendencia menor a elegir la acción \\(a_t\\). Hay varias formas de elegir la mejor acción para ejecutar en cada esstado. Primero, cuando estamos en cierto estado \\(s_t\\), simplemente podríamos tomar la acción \\(a_t\\) que maximiza el valor Q $ Q(s_t, a_t)$: \\[a_t = \\underset{a}{\\textrm{argmax}}(Q(s_t,a))\\] Esta solución es el método Argmax. Otra gran solución, que resulta ser una solución aún mejor para problemas complejos, es el método Softmax. El método Softmax consiste en considerar para cada estado \\(s\\) la siguiente distribución: \\[W_s: a \\in A \\mapsto \\frac{\\exp(Q(s,a))^{\\tau}}{\\sum_{a&#39;}\\exp(Q(s,a&#39;))^{\\tau}} \\textrm{ with } \\tau \\ge 0\\] Luego, elegimos qué acción \\(a\\) llevar a cabo mediante una muestra de un valor aleatorio de esa distribución: \\[a \\sim W_s(.)\\] Sin embargo, el problema que resolveremos en el Caso Práctico 1 será lo suficientemente simple como para usar el método Argmax, así que esto es lo que elegiremos. 1.2.3 El algoritmo de Q-Learning al completo Resumamos los diferentes pasos de todo el proceso de Q-Learning: Inicialización Para todas las parejas de estados \\(s\\) y acciones \\(a\\), los valores Q se inicializan a 0: \\[\\forall s \\in S, a \\in A, Q_0(s,a) = 0\\] Comenzamos en el estado inicial \\(s_0\\). Llevamos a cabo una acción aleatoria posible y llegamos al primer estado \\(s_1\\). Para cada instante \\(t \\ge 1\\), repetiremos un cierto número de veces (1000 veces en nuestro código) lo siguiente: Seleccionamos un estado aleatorio \\(s_t\\) de nuestros 12 estados posibles: \\[s_t = \\textrm{random}(0,1,2,3,4,5,6,7,8,9,10,11)\\] Llevamos a cabo una acción aleatoria \\(a_t\\) que puede conducir al siguiente estado posible, es decir, de modo que \\(R(s_t,a_t) &gt; 0\\): \\[a_t = \\textrm{random}(0,1,2,3,4,5,6,7,8,9,10,11) \\textrm{ t.q. } R(s_t,a_t) &gt; 0\\] Llegamos al siguiente estado \\(s_{t + 1}\\) y obtenemos la recompensa \\(R(s_t,a_t)\\) Calculamos la Diferencia Temporal \\(TD_t(s_t,a_t)\\): \\[TD_t(s_t,a_t) = R(s_t,a_t) + \\gamma \\underset{a}{\\max}(Q(s_{t+1},a)) - Q(s_t, a_t)\\] Actualizamos el valor Q aplicando la ecuación de Bellman: \\[Q_t(s_t,a_t) = Q_{t-1}(s_t,a_t) + \\alpha TD_t(s_t,a_t)\\] 1.3 Implementación Ahora proporcionemos y expliquemos la implementación completa de este modelo de Q-Learning, la solución de nuestro problema de optimización de flujos de almacén. Primero, comenzamos importando las librerías que se usarán en esta implementación. Estos solo incluyen la biblioteca numpy, que ofrece una forma práctica de trabajar con matrices y operaciones matemáticas: # Importar las librerías import numpy as np Luego establecemos los parámetros de nuestro modelo. Estos incluyen el factor de descuento \\(\\gamma\\) y la tasa de aprendizaje $$, que como vimos en la Sección 1.2, son los únicos parámetros del algoritmo Q-Learning: # Configuración de los parámetros gamma y alfa para el Q-Learning gamma = 0.75 alpha = 0.9 Las dos secciones de código anteriores eran simplemente las secciones introductorias, antes de comenzar realmente a construir nuestro modelo de IA. Ahora el siguiente paso es comenzar la primera parte de nuestra implementación: Parte 1 - Definición del entorno. Y para eso, por supuesto, comenzamos definiendo los estados, con un diccionario que asigna los nombres de las ubicaciones (en letras de la A a la L) en los estados (en índices del 0 al 11): # PARTE 1 - DEFINICIÓN DEL ENTORNO # Definición de los estados location_to_state = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;C&#39;: 2, &#39;D&#39;: 3, &#39;E&#39;: 4, &#39;F&#39;: 5, &#39;G&#39;: 6, &#39;H&#39;: 7, &#39;I&#39;: 8, &#39;J&#39;: 9, &#39;K&#39;: 10, &#39;L&#39;: 11} Luego definimos las acciones, con una simple lista de índices del 0 al 11. Recuerda que cada índice de acción corresponde al siguiente estado (siguiente ubicación) al que conduce dicha acción: # Definición de las acciones actions = [0,1,2,3,4,5,6,7,8,9,10,11] Y eventualmente, definimos las recompensas, creando una matriz de recompensas, donde las filas corresponden a los estados actuales \\(s_t\\), las columnas corresponden a las acciones \\(a_t\\) que conducen al siguiente estado \\(s_{t + 1}\\), y las celdas contienen las recompensas \\(R(s_t, a_t)\\). Si una celda \\((s_t, a_t)\\) tiene un 1, eso significa que podemos llevar a cabo la acción \\(a_t\\) del estado actual \\(s_t\\) para llegar al siguiente estado \\(s_{t + 1}\\). Si una celda \\((s_t, a_t)\\) tiene un 0, eso significa que no podemos llevar a cabo la acción \\(a_t\\) del estado actual \\(s_t\\) para llegar a cualquier estado siguiente \\(s_{t + 1}\\). Y por ahora colocaremos manualmente una alta recompensa (1000) dentro de la celda correspondiente a la ubicación G, porque es la ubicación de máxima prioridad donde el almacén autónomo tiene que ir a recoger los productos. Como la ubicación G ha codificado el estado como índice 6, colocamos una recompensa de 1000 en la celda de la fila 6 y la columna 6. Luego, mejoraremos nuestra solución al implementar una forma automática de ir a la ubicación de máxima prioridad, sin tener que actualizar manualmente la matriz de recompensas y dejándola inicializada con 0s y 1s como debería ser. Pero mientras tanto, aquí está debajo de nuestra matriz de recompensas, incluida la actualización manual: # Definición de las recompensas R = np.array([[0,1,0,0,0,0,0,0,0,0,0,0], [1,0,1,0,0,1,0,0,0,0,0,0], [0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,0,0,0,0], [0,0,0,0,0,0,0,0,1,0,0,0], [0,1,0,0,0,0,0,0,0,1,0,0], [0,0,1,0,0,0,1000,1,0,0,0,0], [0,0,0,1,0,0,1,0,0,0,0,1], [0,0,0,0,1,0,0,0,0,1,0,0], [0,0,0,0,0,1,0,0,1,0,1,0], [0,0,0,0,0,0,0,0,0,1,0,1], [0,0,0,0,0,0,0,1,0,0,1,0]]) Eso finaliza esta primera parte. Ahora comencemos la segunda parte de nuestra implementación: Parte 2 - Construcción la solución de IA con Q-Learning. En ese sentido, vamos a seguir el algoritmo de Q-Learning exactamente como lo vimos en la Sección 1.2. Por lo tanto, primero inicializamos todos los valores Q, creando nuestra matriz de valores Q llena de ceros (en los cuales, las filas corresponden a los estados actuales \\(s_t\\), las columnas corresponden a las acciones \\(a_t\\) que conducen al siguiente estado $s_{t + 1} $, y las celdas contienen los valores Q, $Q (s_t, a_t)) $: # PARTE 2 - CONSTRUCCIÓN DE LA SOLUCIÓN DE IA CON Q-LEARNING # Inicialización de los valores Q Q = np.array(np.zeros([12,12])) Luego, por supuesto, implementamos el proceso de Q-Learning, con un bucle for que llevará a cabo un total de 1000 iteraciones, repitiendo 1000 veces los pasos del proceso de Q-Learning que analizamos a fondo al final de la Sección 1.2: # Implementación del proceso de Q-Learning for i in range(1000): current_state = np.random.randint(0,12) playable_actions = [] for j in range(12): if R[current_state, j] &gt; 0: playable_actions.append(j) next_state = np.random.choice(playable_actions) TD = R[current_state, next_state] + gamma*Q[next_state, np.argmax(Q[next_state,])] - Q[current_state, next_state] Q[current_state, next_state] = Q[current_state, next_state] + alpha*TD Opcional: en esta etapa del código, nuestra matriz de valores Q está lista. Podemos echarle un vistazo ejecutando todo el código que hemos implementado hasta ahora e ingresando las siguientes dos instrucciones en la consola: print(&quot;Q-Values:&quot;) print(Q.astype(int)) Y obtenemos la siguiente matriz de valores Q finales: Para una mayor claridad visual, incluso puede verificarse la matriz de valores Q directamente en el Explorador de variables, haciendo doble clic en la variable Q. Luego, para obtener los valores Q como enteros, es conveniente hacer clic en Formato e ingresar un formato de como floante como %.0f. Se obtiene en este caso el siguiente resultado, que es un poco más claro ya que se pueden ver en la matriz Q los índices de las filas y columnas de la misma: Bien, ahora que tenemos nuestra matriz de valores Q, ¡estamos listos para llevarlo a producción! Por lo tanto, podemos pasar a la tercera parte de la implementación, Parte 3: Poner el modelo en producción, dentro de la cual calcularemos la ruta óptima desde cualquier ubicación inicial a cualquier ubicación final de máxima prioridad. La idea aquí será implementar una función de ruta, que tomará como entradas la ubicación de inicio donde se encuentra nuestro robot de almacén autónomo en un momento específico y la ubicación de finalización donde tiene que ir con la máxima prioridad, y eso volverá como genera la ruta más corta dentro de una lista. Sin embargo, dado que queremos indicar las ubicaciones con sus nombres (en letras), a diferencia de sus estados (en índices), necesitaremos un diccionario que asigne los estados de ubicaciones (en índices) a los nombres de ubicaciones (en letras). Y eso es lo primero que haremos aquí en esta tercera parte, usando un truco para invertir nuestro diccionario anterior location\\_to\\_state, ya que de hecho simplemente queremos obtener el mapeo inverso exacto de este diccionario: # PARTE 3 - PONER EL MODELO EN PRODUCCIÓN # Hacer un mapeo de los estados a las ubicaciones state_to_location = {state: location for location, state in location_to_state.items()} Aquí es cuando entra en juego la sección de código más importante. Estamos a punto de implementar la función final route () que tomará como entradas las ubicaciones de inicio y finalización, y que devolverá la ruta óptima entre estas dos ubicaciones. Para explicar exactamente qué hará esta función de ruta, enumeremos los diferentes pasos del proceso, al pasar de la ubicación E a la ubicación G: Comenzamos en nuestra ubicación inicial E. Obtenemos el estado de ubicación E, que según nuestro mapeo location_to_state es \\(s_0 = 4\\). En la fila del estado \\(s_0 = 4\\) de nuestra matriz de valores Q, hallamos la columna con el mayor valor Q (703). Esta columna tiene el índice 8, por lo que ejecutamos la acción del índice 8 que nos lleva al siguiente estado \\(s_{t+1} = 8\\). Obtenemos la ubicación del estado 8, que según nuestro mapeo state_to_location es la ubicación I. Por lo tanto, nuestra próxima ubicación es la ubicación I, que se adjunta a nuestra lista que contiene la ruta óptima global. Repetimos los mismos 5 pasos anteriores desde nuestra nueva ubicación inicial I, hasta llegar a nuestro destino final, la ubicación G. Por lo tanto, dado que no sabemos cuántas ubicaciones tendremos que atravesar entre las ubicaciones inicial y final, tenemos que hacer un bucle while que repetirá el proceso de 5 pasos descrito anteriormente, y que se detendrá tan pronto como lo hagamos llegar a la ubicación final de máxima prioridad: # Hacer la función final que devolverá la ruta óptima def route(starting_location, ending_location): route = [starting_location] next_location = starting_location while (next_location != ending_location): starting_state = location_to_state[starting_location] next_state = np.argmax(Q[starting_state,]) next_location = state_to_location[next_state] route.append(next_location) starting_location = next_location return route ¡Felicidades, nuestra herramienta ya está lista! Cuando lo probamos para ir de E a G, obtenemos las dos rutas óptimas posibles después de imprimir la ruta final ejecutando el código completo varias veces: # Imprimir la ruta final print(&#39;Route:&#39;) route(&#39;E&#39;, &#39;G&#39;) Route: Out[1]: [&#39;E&#39;, &#39;I&#39;, &#39;J&#39;, &#39;F&#39;, &#39;B&#39;, &#39;C&#39;, &#39;G&#39;] Out[2]: [&#39;E&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;, &#39;H&#39;, &#39;G&#39;] Bien, tenemos una primera versión del modelo que funciona bien. Pero podemos mejorarlo de dos maneras. Primero, al automatizar la atribución de recompensas a la ubicación de máxima prioridad, para que no tengamos que hacerlo manualmente. Y segundo, al agregar una función que nos da la opción de ir a una ubicación intermedia antes de ir a la ubicación de máxima prioridad. Esa ubicación intermedia debe estar, por supuesto, en las 3 ubicaciones prioritarias principales. Y, de hecho, en nuestra clasificación de ubicaciones de máxima prioridad, la segunda ubicación de máxima prioridad es la ubicación K. Por lo tanto, para optimizar aún más los flujos de almacén, nuestro robot de almacén autónomo debe ir por la ubicación K para recoger los productos en su camino a la ubicación de máxima prioridad G. Una forma de hacer esto es tener la opción de ir a cualquier ubicación intermedia en el proceso de nuestra función route(). Y esto es exactamente lo que implementaremos como segunda mejora. Pero primero, implementemos la primera mejora, que automatiza la atribución de recompensas. La forma de hacerlo es en dos pasos: primero debemos hacer una copia (llamada R_new) de nuestra matriz de recompensa dentro de la cual la función route() actualizará automáticamente la recompensa en la celda de la ubicación final. De hecho, la ubicación final es una de las entradas de la función route(), por lo que al usar nuestro diccionario de location_to_state podemos encontrar fácilmente esa celda y actualizar su recompensa a 1000. Y segundo, debemos incluir toda la lógica del algoritmo de Q-learning (incluido el paso de inicialización) dentro de la función de ruta, justo después de hacer esa actualización de la recompensa en nuestra copia de la matriz de recompensas. De hecho, en nuestra implementación anterior anterior, el proceso de Q-Learning ocurre en la versión original de la matriz de recompensas, que ahora se supone que permanece como está, es decir, se inicializa solo a 1s y 0s. Por lo tanto, debemos incluir el proceso de Q-Learning dentro de la función de ruta y hacer que suceda en nuestra copia R_new de la matriz de recompensas, en lugar de la matriz de recompensas original R. Por lo tanto, nuestra implementación completa se convierte en lo siguiente: # Inteligencia Artificial aplicada a Negocios y Empresas # Optimización de Procesos en un almacén con Q-Learning # # Importar las librerías import numpy as np # Configuración de los parámetros gamma y alfa para el Q-Learning gamma = 0.75 alpha = 0.9 # PARTE 1 - DEFINICIÓN DEL ENTORNO # Definición de los estados location_to_state = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;C&#39;: 2, &#39;D&#39;: 3, &#39;E&#39;: 4, &#39;F&#39;: 5, &#39;G&#39;: 6, &#39;H&#39;: 7, &#39;I&#39;: 8, &#39;J&#39;: 9, &#39;K&#39;: 10, &#39;L&#39;: 11} # Definición de las acciones actions = [0,1,2,3,4,5,6,7,8,9,10,11] # Definición de las recompensas R = np.array([[0,1,0,0,0,0,0,0,0,0,0,0], [1,0,1,0,0,1,0,0,0,0,0,0], [0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,0,0,0,0], [0,0,0,0,0,0,0,0,1,0,0,0], [0,1,0,0,0,0,0,0,0,1,0,0], [0,0,1,0,0,0,1,1,0,0,0,0], [0,0,0,1,0,0,1,0,0,0,0,1], [0,0,0,0,1,0,0,0,0,1,0,0], [0,0,0,0,0,1,0,0,1,0,1,0], [0,0,0,0,0,0,0,0,0,1,0,1], [0,0,0,0,0,0,0,1,0,0,1,0]]) # PARTE 2 - CONSTRUCCIÓN DE LA SOLUCIÓN DE IA CON Q-LEARNING # Crear una función de mapping desde los estados a las ubicaciones state_to_location = {state: location for location, state in location_to_state.items()} # Crear una función que devuelva el camino más corto desde la ubicación inicial a la final def route(starting_location, ending_location): R_new = np.copy(R) ending_state = location_to_state[ending_location] R_new[ending_state, ending_state] = 1000 Q = np.array(np.zeros([12,12])) for i in range(1000): current_state = np.random.randint(0,12) playable_actions = [] for j in range(12): if R_new[current_state, j] &gt; 0: playable_actions.append(j) next_state = np.random.choice(playable_actions) TD = R_new[current_state, next_state] + gamma * Q[next_state, np.argmax(Q[next_state,])] - Q[current_state, next_state] Q[current_state, next_state] = Q[current_state, next_state] + alpha * TD route = [starting_location] next_location = starting_location while (next_location != ending_location): starting_state = location_to_state[starting_location] next_state = np.argmax(Q[starting_state,]) next_location = state_to_location[next_state] route.append(next_location) starting_location = next_location return route # PARTE 3 - PONER EL MODELO EN PRODUCCIÓN # Imprimir la ruta final print(&#39;Route:&#39;) route(&#39;E&#39;, &#39;G&#39;) Al ejecutar este nuevo código varias veces, obtenemos, por supuesto, las mismas dos posibles rutas óptimas que antes. Ahora abordemos la segunda mejora. Hay tres formas de agregar la opción de ir por la ubicación intermedia K, la segunda ubicación de máxima prioridad: Otorgamos una alta recompensa a la acción que lleva de la ubicación J a la ubicación K. Esta alta recompensa debe ser mayor que 1 y menor a 1000. De hecho, debe ser mayor que 1 para que el proceso de Q-Learning favorezca la acción que lleva de J a K, en oposición a la acción que lleva de J a F que tiene la recompensa 1. Y debe ser inferior a 1000, por lo que debemos mantener la recompensa más alta en la ubicación de mayor prioridad para asegurarnos de que terminemos allí. Por lo tanto, por ejemplo, en nuestra matriz de recompensas podemos dar una alta recompensa de 500 a la celda en la fila del índice 9 y la columna del índice 10, ya que de hecho esa celda corresponde a la acción que conduce desde la ubicación J (índice de estado 9) a ubicación K (índice de estado 10). De esa manera, nuestro robot de almacén autónomo siempre irá por la ubicación K en su camino hacia la ubicación G. Así es como sería la matriz de recompensas en ese caso: # Definición de las recompensas R = np.array([[0,1,0,0,0,0,0,0,0,0,0,0], [1,0,1,0,0,1,0,0,0,0,0,0], [0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,0,0,0,0], [0,0,0,0,0,0,0,0,1,0,0,0], [0,1,0,0,0,0,0,0,0,1,0,0], [0,0,1,0,0,0,1,1,0,0,0,0], [0,0,0,1,0,0,1,0,0,0,0,1], [0,0,0,0,1,0,0,0,0,1,0,0], [0,0,0,0,0,1,0,0,1,0,500,0], [0,0,0,0,0,0,0,0,0,1,0,1], [0,0,0,0,0,0,0,1,0,0,1,0]]) Damos una mala recompensa a la acción que lleva de la ubicación J a la ubicación F. Esta mala recompensa solo tiene que ser inferior a 0. De hecho, al castigar esta acción con una mala recompensa, el proceso de Q-Learning nunca favorecerá esa acción que lleva de J a F. Por lo tanto, por ejemplo, en nuestra matriz de recompensas podemos dar una mala recompensa de -500 a la celda en la fila del índice 9 y la columna del índice 5, ya que esa celda corresponde a la acción que conduce desde la ubicación J (estado con índice 9) a la ubicación F (estado con índice 5). De esa manera, nuestro robot de almacén autónomo nunca pasará por la ubicación F en su camino hacia la ubicación G. Así es como sería la matriz de recompensas en ese caso: # Definición de las recompensas R = np.array([[0,1,0,0,0,0,0,0,0,0,0,0], [1,0,1,0,0,1,0,0,0,0,0,0], [0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,0,0,0,0], [0,0,0,0,0,0,0,0,1,0,0,0], [0,1,0,0,0,0,0,0,0,1,0,0], [0,0,1,0,0,0,1,1,0,0,0,0], [0,0,0,1,0,0,1,0,0,0,0,1], [0,0,0,0,1,0,0,0,0,1,0,0], [0,0,0,0,0,-500,0,0,1,0,1,0], [0,0,0,0,0,0,0,0,0,1,0,1], [0,0,0,0,0,0,0,1,0,0,1,0]]) Realizamos una función adicional best_route(), tomando como entradas las tres ubicaciones inicial, intermedia y final, que llamará a nuestra función route() anterior dos veces, una primera vez desde la ubicación inicial a la ubicación intermedia, y un segunda vez desde la ubicación intermedia hasta la ubicación final. Las dos primeras ideas son fáciles de implementar manualmente, pero muy difíciles de implementar automáticamente. De hecho, es fácil encontrar automáticamente el índice de la ubicación intermedia donde queremos ir, pero es muy difícil obtener el índice de la ubicación que lleva a esa ubicación intermedia, ya que depende de la ubicación inicial y la ubicación final. Puedes intentar implementar la primera o la segunda idea, y verás lo que quiero decir. En consecuencia, implementaremos la tercera idea, que puede programarse en solo dos líneas adicionales de código: # Hacer la función final que devuelve la ruta óptima def best_route(starting_location, intermediary_location, ending_location): return route(starting_location, intermediary_location) + route(intermediary_location, ending_location)[1:] Finalmente, el código final que incluye esa mejora importante para la optimización de los flujos de nuestro almacén se convierte en: # Inteligencia Artificial aplicada a Negocios y Empresas # Optimización de Procesos en un almacén con Q-Learning # # Importar las librerías import numpy as np # Configuración de los parámetros gamma y alfa para el Q-Learning gamma = 0.75 alpha = 0.9 # PARTE 1 - DEFINICIÓN DEL ENTORNO # Definición de los estados location_to_state = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;C&#39;: 2, &#39;D&#39;: 3, &#39;E&#39;: 4, &#39;F&#39;: 5, &#39;G&#39;: 6, &#39;H&#39;: 7, &#39;I&#39;: 8, &#39;J&#39;: 9, &#39;K&#39;: 10, &#39;L&#39;: 11} # Definición de las acciones actions = [0,1,2,3,4,5,6,7,8,9,10,11] # Definición de las recompensas R = np.array([[0,1,0,0,0,0,0,0,0,0,0,0], [1,0,1,0,0,1,0,0,0,0,0,0], [0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,0,0,0,0], [0,0,0,0,0,0,0,0,1,0,0,0], [0,1,0,0,0,0,0,0,0,1,0,0], [0,0,1,0,0,0,1,1,0,0,0,0], [0,0,0,1,0,0,1,0,0,0,0,1], [0,0,0,0,1,0,0,0,0,1,0,0], [0,0,0,0,0,1,0,0,1,0,1,0], [0,0,0,0,0,0,0,0,0,1,0,1], [0,0,0,0,0,0,0,1,0,0,1,0]]) # PARTE 2 - CONSTRUCCIÓN DE LA SOLUCIÓN DE IA CON Q-LEARNING # Crear una función de mapping desde los estados a las ubicaciones state_to_location = {state: location for location, state in location_to_state.items()} # Crear una función que devuelva el camino más corto desde la ubicación inicial a la final def route(starting_location, ending_location): R_new = np.copy(R) ending_state = location_to_state[ending_location] R_new[ending_state, ending_state] = 1000 Q = np.array(np.zeros([12,12])) for i in range(1000): current_state = np.random.randint(0,12) playable_actions = [] for j in range(12): if R_new[current_state, j] &gt; 0: playable_actions.append(j) next_state = np.random.choice(playable_actions) TD = R_new[current_state, next_state] + gamma * Q[next_state, np.argmax(Q[next_state,])] - Q[current_state, next_state] Q[current_state, next_state] = Q[current_state, next_state] + alpha * TD route = [starting_location] next_location = starting_location while (next_location != ending_location): starting_state = location_to_state[starting_location] next_state = np.argmax(Q[starting_state,]) next_location = state_to_location[next_state] route.append(next_location) starting_location = next_location return route # PARTE 3 - PONER EL MODELO EN PRODUCCIÓN # Crear la función final que devuelve la ruta óptima def best_route(starting_location, intermediary_location, ending_location): return route(starting_location, intermediary_location) + route(intermediary_location, ending_location)[1:] # Imprimir la ruta final print(&#39;Route:&#39;) best_route(&#39;E&#39;, &#39;K&#39;, &#39;G&#39;) Al ejecutar este código completamente nuevo tantas veces como queramos, siempre obtendremos el mismo resultado esperado: Best Route: Out[1]: [&#39;E&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;, &#39;H&#39;, &#39;G&#39;] "],
["parte-2-minimización-de-costes.html", "Parte 2 Parte 2 - Minimización de Costes 2.1 Caso Práctico: Minimización de Costes en el Consumo Energético de un Centro de Datos 2.2 Solución de IA 2.3 Implementation 2.4 Resumen: El Algoritmo General de IA", " Parte 2 Parte 2 - Minimización de Costes ¡Felicitaciones por arrasar en el primer caso de estudio! Pasemos a una IA nueva y más avanzada. 2.1 Caso Práctico: Minimización de Costes en el Consumo Energético de un Centro de Datos 2.1.1 Problema a resolver En 2016, la IA DeepMind minimizó una gran parte del costo de Google al reducir la factura de enfriamiento del centro de datos de Google en 40% utilizando su modelo de IA DQN (Deep Q-Learning). En este caso práctico, haremos algo muy similar. Configuraremos nuestro propio entorno de servidor y construiremos una IA que controlará el enfriamiento / calentamiento del servidor para que se mantenga en un rango óptimo de temperaturas mientras se ahorra la máxima energía, minimizando así los costes. Y tal como lo hizo la IA de DeepMind, nuestro objetivo será lograr al menos un 40% de ahorro de energía. 2.1.1.1 Entorno a definir Antes de definir los estados, las acciones y las recompensas, debemos explicar cómo funciona el servidor. Lo haremos en varios pasos. Primero, enumeraremos todos los parámetros y variables del entorno por los cuales se controla el servidor. Después de eso, estableceremos la suposición esencial del problema, en la cual nuestra IA dependerá para proporcionar una solución. Luego especificaremos cómo simularemos todo el proceso. Y eventualmente explicaremos el funcionamiento general del servidor y cómo la IA desempeña su papel. Parámetros la temperatura atmosférica promedio durante un mes el rango óptimo de temperaturas del servidor, que será \\([18 \\degree \\textrm{C}, 24 \\degree \\textrm{C}]\\) la temperatura mínima del servidor por debajo de la cual no funciona, que será \\(-20 \\degree \\textrm {C}\\) la temperatura máxima del servidor por encima de la cual no funciona, que será de \\(80 \\degree \\textrm {C}\\) el número mínimo de usuarios en el servidor, que será 10 el número máximo de usuarios en el servidor, que será de 100 el número máximo de usuarios en el servidor que puede subir o bajar por minuto, que será 5 la tasa mínima de transmisión de datos en el servidor, que será 20 la velocidad máxima de transmisión de datos en el servidor, que será de 300 la velocidad máxima de transmisión de datos que puede subir o bajar por minuto, que será 10 Variables: la temperatura del servidor en cualquier momento la cantidad de usuarios en el servidor en cualquier momento la velocidad de transmisión de datos en cualquier minuto la energía gastada por la IA en el servidor (para enfriarlo o calentarlo) en cualquier momento la energía gastada por el sistema de enfriamiento integrado del servidor que automáticamente lleva la temperatura del servidor al rango óptimo cada vez que la temperatura del servidor sale de este rango óptimo Todos estos parámetros y variables serán parte de nuestro entorno de servidor e influirán en las acciones de la IA en el servidor. A continuación, expliquemos los dos supuestos básicos del entorno. Es importante comprender que estos supuestos no están relacionados con la inteligencia artificial, sino que se utilizan para simplificar el entorno para que podamos centrarnos al máximo en la solución de inteligencia artificial. Suposiciones: Nos basaremos en los siguientes dos supuestos esenciales: Supuesto 1: la temperatura del servidor se puede aproximar mediante Regresión lineal múltiple, mediante una función lineal de la temperatura atmosférica, el número de usuarios y la velocidad de transmisión de datos: \\[\\textrm{temp. del server} = b_0 + b_1 \\times \\textrm{temp. atmosf.} + b_2 \\times \\textrm{n. de usuarios} + b_3 \\times \\textrm{ratio de trans. de datos} \\] donde \\(b_0 \\in \\mathbb{R}\\), \\(b_1&gt;0\\), \\(b_2&gt;0\\) y \\(b_3&gt;0\\). La razón de ser de este supuesto y la razón por la cual \\(b_1&gt;0\\), \\(b_2&gt;0\\) y \\(b_3&gt;0\\) son fáciles de entender de entender. De hecho, tiene sentido que cuando la temperatura atmosférica aumenta, la temperatura del servidor aumenta. Además, cuanto más usuarios estén activos en el servidor, más gastará el servidor para manejarlos y, por lo tanto, mayor será la temperatura del servidor. Y finalmente, por supuesto, mientras más datos se transmitan dentro del servidor, más gastará el servidor para procesarlo y, por lo tanto, la temperatura más alta del servidor será. Y para fines de simplicidad, solo suponemos que estas correlaciones son lineales. Sin embargo, podría ejecutarse totalmente la misma simulación suponiendo que son cuadráticos o logarítmicos. Siéntete libre de retocar el modelo. Finalmente, supongamos que después de realizar esta Regresión lineal múltiple, obtuvimos los siguientes valores de los coeficientes: \\(b_0 = 0\\), \\(b_1 = 1\\), \\(b_2 = 1.25\\) y \\(b_3 = 1.25\\). En consecuencia: \\[\\textrm{temp. del server} = \\textrm{temp. atmosf.} + 1.25 \\times \\textrm{n. de usuarios} + 1.25 \\times \\textrm{ratio de trans. de datos} \\] Supuesto 2: la energía gastada por un sistema (nuestra IA o el sistema de enfriamiento integrado del servidor) que cambia la temperatura del servidor de \\(T_t\\) a \\(T_{t + 1}\\) en 1 unidad de tiempo (aquí 1 minuto), se puede aproximar nuevamente mediante regresión mediante una función lineal del cambio absoluto de temperatura del servidor: \\[E_t = \\alpha |\\Delta T_t| + \\beta = \\alpha |T_{t+1} - T_t| + \\beta\\] donde: \\(E_t\\) es la energía gastada por el sistema en el servidor entre los tiempos \\(t\\) y \\(t +1\\), \\(\\Delta T_t\\) es el cambio de temperatura del servidor causado por el sistema entre los tiempos \\(t\\) y \\(t +1\\), \\(T_t\\) es la temperatura del servidor en el instante \\(t\\), \\(T_{t + 1}\\) es la temperatura del servidor en el instante \\(t +1\\), \\(\\alpha &gt; 0\\), y \\(\\beta \\in \\mathbb{R}\\). Nuevamente, expliquemos por qué tiene sentido intuitivamente hacer esta suposición con \\(\\alpha&gt;0\\). Eso es simplemente porque cuanto más se calienta la IA o se enfría el servidor, más gasta energía para hacer esa transferencia de calor. De hecho, por ejemplo, imaginemos que el servidor de repente tiene problemas de sobrecalentamiento y acaba de alcanzar \\(80 \\degree\\) C, luego, dentro de una unidad de tiempo (1 minuto), la IA necesitará mucha más energía para que la temperatura del servidor vuelva a su temperatura óptima de \\(24 \\degree\\) C que devolverlo a \\(50 \\degree\\) C por ejemplo. Y de nuevo por razones de simplicidad, solo suponemos que estas correlaciones son lineales. Además (en caso de que te lo estés preguntado), ¿por qué tomamos el valor absoluto? Eso es simplemente porque cuando la IA enfría el servidor, \\(T_{t + 1}&lt;T_t\\), entonces \\(\\Delta T &lt;0\\). Y, por supuesto, una energía siempre es positiva, por lo que tenemos que tomar el valor absoluto de \\(\\Delta T\\). Finalmente, para mayor simplicidad, también asumiremos que los resultados de la regresión son \\(\\alpha = 1\\) y \\(\\beta = 0\\), de modo que obtenemos la siguiente ecuación final basada en el supuesto 2: \\[\\begin{equation*} E_t = |\\Delta T_t| = |T_{t+1} - T_t| = \\begin{cases} T_{t+1} - T_t &amp; \\textrm{si $T_{t+1} &gt; T_t$, es decir, si el servidor se calienta} \\\\ T_t - T_{t+1} &amp; \\textrm{si $T_{t+1} &lt; T_t$, tes decir, si el servidor se enfria} \\end{cases} \\end{equation*}\\] Ahora, expliquemos cómo simularemos el funcionamiento del servidor con los usuarios y los datos que entran y salen. Simulación El número de usuarios y la velocidad de transmisión de datos fluctuarán aleatoriamente para simular un servidor real. Esto lleva a una aleatoriedad en la temperatura y la IA tiene que entender cuánta potencia de enfriamiento o calefacción tiene que transferir al servidor para no deteriorar el rendimiento del servidor y, al mismo tiempo, gastar la menor energía optimizando su transferencia de calor. Ahora que tenemos la imagen completa, expliquemos el funcionamiento general del servidor y la IA dentro de este entorno. Funcionamiento general: Dentro de un centro de datos, estamos tratando con un servidor específico que está controlado por los parámetros y variables enumerados anteriormente. Cada minuto, algunos usuarios nuevos inician sesión en el servidor y algunos usuarios actuales cierran sesión, por lo tanto, actualizan el número de usuarios activos en el servidor. Igualmente, cada minuto se transmiten algunos datos nuevos al servidor, y algunos datos existentes se transmiten fuera del servidor, por lo tanto, se actualiza la velocidad de transmisión de datos que ocurre dentro del servidor. Por lo tanto, según el supuesto 1 anterior, la temperatura del servidor se actualiza cada minuto. Ahora, concéntrate, porque aquí es donde entenderás el gran papel que la IA tiene que jugar en el servidor. Dos posibles sistemas pueden regular la temperatura del servidor: la IA o el sistema de enfriamiento integrado del servidor. El sistema de enfriamiento integrado del servidor es un sistema no inteligente que automáticamente devolverá la temperatura del servidor a su temperatura óptima. Expliquemos esto con más detalles: cuando la temperatura del servidor se actualiza cada minuto, puede mantenerse dentro del rango de temperaturas óptimas (\\([18 \\degree \\textrm{C}, 24 \\degree \\textrm{C}]\\)), o salir de este rango. Si sale del rango óptimo, como por ejemplo \\(30 \\degree\\) C, el sistema de enfriamiento integrado del servidor llevará automáticamente la temperatura al límite más cercano del rango óptimo, que es \\(24 \\degree\\) C. Sin embargo, el sistema de enfriamiento integrado de este servidor lo hará solo cuando la IA no esté activada. Si la IA está activada, en ese caso el sistema de enfriamiento integrado del servidor se desactiva y es la IA la que actualiza la temperatura del servidor para regularlo de la mejor manera. Pero la IA hace eso después de algunas predicciones previas, no de una manera determinista como con el sistema de enfriamiento integrado del servidor no inteligente. Antes de que haya una actualización de la cantidad de usuarios y la velocidad de transmisión de datos que hace que cambie la temperatura del servidor, la IA predice si debería enfriar el servidor, no hacer nada o calentar el servidor. Entonces ocurre el cambio de temperatura y la IA reitera. Y dado que estos dos sistemas son complementarios, los evaluaremos por separado para comparar su rendimiento. Y eso nos lleva a la energía. De hecho, recordemos que un objetivo principal de la IA es ahorrar algo de energía gastada en este servidor. En consecuencia, nuestra IA tiene que gastar menos energía que la energía gastada por el sistema de enfriamiento no inteligente en el servidor. Y dado que, según el supuesto 2 anterior, la energía gastada en el servidor (por cualquier sistema) es proporcional al cambio de temperatura dentro de una unidad de tiempo: \\[\\begin{equation*} E_t = |\\Delta T_t| = \\alpha |T_{t+1} - T_t| = \\begin{cases} T_{t+1} - T_t &amp; \\textrm{si $T_{t+1} &gt; T_t$, es decir, si el servidor se calienta} \\\\ T_t - T_{t+1} &amp; \\textrm{if $T_{t+1} &lt; T_t$, es decir, si el servidor se enfria} \\end{cases} \\end{equation*}\\] entonces eso significa que la energía ahorrada por la IA en cada instante \\(t\\) (cada minuto) es, de hecho, la diferencia en los cambios absolutos de temperatura causados en el servidor entre el sistema de enfriamiento integrado del servidor no inteligente y la IA de \\(t\\) y \\(t + 1\\): \\[\\begin{align*} \\textrm{Energia ahorrada por la IA entre $t$ y $t+1$} &amp; = |\\Delta T_t^{\\textrm{Sistema de Enfriamiento Integrado del Servidor}}| - |\\Delta T_t^{\\textrm{IA}}| \\\\ &amp; = |\\Delta T_t^{\\textrm{no IA}}| - |\\Delta T_t^{\\textrm{IA}}| \\end{align*}\\] donde: \\(\\Delta T_t^{\\textrm{no IA}}\\) es el cambio de temperatura que causaría el sistema de enfriamiento integrado del servidor sin la IA en el servidor durante la iteración \\(t\\), es decir, del instante \\(t\\) al instante \\(t + 1\\), \\(\\Delta T_t^{\\textrm{AI}}\\) es el cambio de temperatura causado por la IA en el servidor durante la iteración \\(t\\), es decir, del instante \\(t\\) al instante \\(t + 1\\). Nuestro objetivo será ahorrar la energía máxima cada minuto, por lo tanto, ahorrar la energía total máxima durante 1 año completo de simulación y, finalmente, ahorrar los costos máximos en la factura de electricidad de refrigeración / calefacción. ¿Estamos preparados? ¡Excelente! Ahora que entendemos completamente cómo funciona nuestro entorno de servidor y cómo se simula, es hora de proceder con lo que debe hacerse absolutamente al definir un entorno de IA: Definir los estados Definir las acciones Definir las recompensas Definir los estados El estado de entrada \\(s_t\\) en el momento \\(t\\) se compone de los siguientes tres elementos: La temperatura del servidor en el instante \\(t\\). El número de usuarios en el servidor en el instante \\(t\\). La velocidad de transmisión de datos en el servidor en el instante \\(t\\). Por lo tanto, el estado de entrada será un vector de entrada de estos tres elementos. Nuestra futura IA tomará este vector como entrada y devolverá la acción para ejecutar en cada instante \\(t\\). Definir las acciones Las acciones son simplemente los cambios de temperatura que la IA puede causar dentro del servidor, para calentarlo o enfriarlo. Para que nuestras acciones sean discretas, consideraremos 5 posibles cambios de temperatura de \\(-3 \\degree\\) C a \\(+ 3 \\degree\\) C, para que terminemos con las 5 acciones posibles que la IA puede llevar a cabo para regular la temperatura del servidor: Acción ¿Qué hace? 0 La IA enfría el servidor \\(3 \\degree\\)C 1 La IA enfría el servidor \\(1.5 \\degree\\)C 2 La IA no transfiere calor ni frio al servidor (sin cambio de temperatura) 3 La IA calienta el servidor \\(1.5 \\degree\\)C 4 La IA calienta el servidor \\(3 \\degree\\)C Definir las recompensas. Después de leer el párrafo “Funcionamiento general” anterior, puedes adivinar cuál será la recompensa. Por supuesto, la recompensa en la iteración \\(t\\) es la energía gastada en el servidor que la IA está ahorrando con respecto al sistema de enfriamiento integrado del servidor, es decir, la diferencia entre la energía que gastaría el sistema de enfriamiento no inteligente si la IA fuera desactivada y la energía que la IA gasta en el servidor: \\[\\textrm{Reward}_t = E_t^{\\textrm{no IA}} - E_t^{\\textrm{IA}}\\] Y como (Supuesto 2), la energía gastada es igual al cambio de temperatura causado en el servidor (por cualquier sistema, incluido el AI o el sistema de enfriamiento no inteligente): \\[\\begin{equation*} E_t = |\\Delta T_t| = \\alpha |T_{t+1} - T_t| = \\begin{cases} T_{t+1} - T_t &amp; \\textrm{si $T_{t+1} &gt; T_t$, es decir, si el servidor se calienta} \\\\ T_t - T_{t+1} &amp; \\textrm{si $T_{t+1} &lt; T_t$, es decir, si el servidor se enfria} \\end{cases} \\end{equation*}\\] entonces obtenemos que la recompensa recibida en el instante \\(t\\) es, de hecho, la diferencia en el cambio de temperatura causada en el servidor entre el sistema de enfriamiento no inteligente (es decir, cuando no hay IA) y la IA: \\[\\begin{align*} \\textrm{Reward}_t &amp; = \\textrm{Energía ahorrada por la IA entre $t$ y $t+1$} \\\\ &amp; = E_t^{\\textrm{no IA}} - E_t^{\\textrm{IA}} \\\\ &amp; = |\\Delta T_t^{\\textrm{no IA}}| - |\\Delta T_t^{\\textrm{IA}}| \\end{align*}\\] donde: \\(\\Delta T_t^{\\textrm{no IA}}\\) es el cambio de temperatura que causaría el sistema de enfriamiento integrado del servidor sin la IA en el servidor durante la iteración \\(t\\), es decir, del instante \\(t\\) al instante \\(t + 1\\), \\(\\Delta T_t^{\\textrm{AI}}\\) es el cambio de temperatura causado por la IA en el servidor durante la iteración \\(t\\), es decir, del instante \\(t\\) al instante \\(t + 1\\). Nota importante: es importante comprender que los sistemas (nuestra IA y el sistema de enfriamiento del servidor) se evaluarán por separado para calcular las recompensas. Y dado que cada vez que sus acciones conducen a temperaturas diferentes, tendremos que realizar un seguimiento por separado de las dos temperaturas \\(T_t^{\\textrm{IA}}\\) and \\(T_t^{\\textrm{no IA}}\\). Ahora, para terminar esta sección, vamos a hacer una pequeña simulación de 2 iteraciones (es decir, 2 minutos), como un ejemplo que hará que todo quede claro. Ejemplo de simulación final. Digamos que estamos en el instante de tiempo \\(t = 4:00\\) pm y que la temperatura del servidor es \\(T_t = 28 \\degree\\) C, tanto con la IA como sin la IA. En este momento exacto, la IA predice la acción 0, 1, 2, 3 o 4. Desde ahora, la temperatura del servidor está fuera del rango de temperatura óptimo \\([18 \\degree \\textrm{C}, 24 \\degree \\textrm{C }]\\), la IA probablemente predecirá las acciones 0, 1 o 2. Digamos que predice 1, lo que corresponde a enfriar el servidor en \\(1.5 \\degree\\) C. Por lo tanto, entre \\(t = 4:00\\) pm y \\(t + 1 = 4: 01\\) pm, la IA hace que la temperatura del servidor pase de $T_t^{} = 28 $ a \\(T_{t + 1}^{\\ textrm{IA}} = 26.5 \\degree \\textrm{C}\\): \\[\\begin{align*} \\Delta T_t^{\\textrm{IA}} &amp; = T_{t+1}^{\\textrm{IA}} - T_t^{\\textrm{IA}} \\\\ &amp; = 26.5 - 27 \\\\ &amp; = -1.5 \\degree \\textrm{C} \\end{align*}\\] Por lo tanto, según el supuesto 2, la energía gastada por la IA en el servidor es: \\[\\begin{align*} E_t^{\\textrm{IA}} &amp; = |\\Delta T_t^{\\textrm{IA}}| \\\\ &amp; = 1.5 \\ \\textrm{Joules} \\end{align*}\\] Bien, ahora solo falta una información para calcular la recompensa: es la energía que el sistema de enfriamiento integrado del servidor habría gastado si la IA se hubiera desactivado entre las 4:00 p.m. y las 4:01 p.m. Recordemos que este sistema de enfriamiento no inteligente lleva automáticamente la temperatura del servidor de vuelta al límite más cercano del rango de temperatura óptimo \\([18 \\degree \\textrm{C}, 24 \\degree \\textrm{C}]\\). Entonces, dado que a \\(t = 4: 00 ¡\\) pm la temperatura era \\(T_t = 28 \\degree\\) C, entonces el límite más cercano del rango de temperatura óptimo en ese momento era \\(24 \\degree\\) C. Por lo tanto, el sistema de enfriamiento integrado del servidor habría cambiado la temperatura de \\(T_t = 28 \\degree \\textrm{C}\\) a \\(T_{t + 1} = 24 \\degree \\textrm{C}\\), y por lo tanto la temperatura del servidor cambia habría ocurrido si no hubiera IA es: \\[\\begin{align*} \\Delta T_t^{\\textrm{no IA}} &amp; = T_{t+1}^{\\textrm{no IA}} - T_t^{\\textrm{no IA}} \\\\ &amp; = 24 - 28 \\\\ &amp; = -4 \\degree C \\end{align*}\\] Por lo tanto, según el supuesto 2, la energía que el sistema de enfriamiento no inteligente habría gastado si no hubiera IA es: \\[\\begin{align*} E_t^{\\textrm{no IA}} &amp; = |\\Delta T_t^{\\textrm{no IA}}| \\\\ &amp; = 4 \\ \\textrm{Joules} \\end{align*}\\] En conclusión, la recompensa que obtenemos después de llevar a cabo esta acción en el momento \\(t = 4: 00\\) pm es: \\[\\begin{align*} \\textrm{Reward} &amp; = E_t^{\\textrm{no IA}} - E_t^{\\textrm{IA}} \\\\ &amp; = 4 - 1.5 \\\\ &amp; = 2.5 \\end{align*}\\] Luego, entre \\(t = 4: 00\\) pm y \\(t + 1 = 4: 01\\) pm, suceden otras cosas: algunos usuarios nuevos inician sesión en el servidor, algunos usuarios existentes cierran sesión en el servidor, algunos datos nuevos son transmitiendo dentro del servidor, y algunos datos existentes se transmiten fuera del servidor. Según el supuesto 1, estos factores hacen que la temperatura del servidor cambie. Digamos que aumentan la temperatura del servidor en \\(5 \\degree\\) C: \\[\\Delta_t \\ \\textrm{Temperatura Intrinseca} = 5 \\degree C\\] Ahora recuerde que estamos evaluando dos sistemas por separado: nuestra IA y el sistema de enfriamiento integrado del servidor. Por lo tanto, debemos calcular por separado las dos temperaturas que obtendríamos con estos dos sistemas a \\(t + 1 = 4: 01\\) pm. Comencemos con la IA. La temperatura que obtenemos en \\(t + 1 = 4: 01\\) pm cuando se activa la IA es: \\[\\begin{align*} T_{t+1}^{\\textrm{IA}} &amp; = T_t^{\\textrm{IA}} + \\Delta T_t^{\\textrm{IA}} + \\Delta_t \\ \\textrm{Temperatura Intrinseca} \\\\ &amp; = 28 + (-1.5) + 5 \\\\ &amp; = 31.5 \\degree C \\end{align*}\\] Y la temperatura que obtenemos en \\(t + 1 = 4: 01\\) pm cuando la IA no está activada es: \\[\\begin{align*} T_{t+1}^{\\textrm{no IA}} &amp; = T_t^{\\textrm{no IA}} + \\Delta T_t^{\\textrm{no IA}} + \\Delta_t \\ \\textrm{Temperatura Intrinseca} \\\\ &amp; = 28 + (-4) + 5 \\\\ &amp; = 29 \\degree C \\end{align*}\\] Perfecto, tenemos nuestras dos temperaturas separadas, que son \\(T_{t+1}^{\\textrm{AI}} = 29.5 \\degree C\\) cuando la IA está activada, y \\(T_{t+1}^{\\textrm{noAI}} = 27 \\degree C\\) cuando la IA no está activada. Ahora simulemos lo que sucede entre los instantes \\(t + 1 = 4:01\\) pm y \\(t + 2 = 4:02\\) pm. Nuevamente, nuestra IA hará una predicción, y dado que el servidor se está calentando, digamos que predice la acción 0, que corresponde a enfriar el servidor en \\(3 \\degree C\\), reduciéndolo a \\(T_{t + 2}^{\\textrm{IA}} = 28.5 \\degree C\\). Por lo tanto, la energía gastada por la IA entre \\(t + 1 = 4: 01\\) pm y \\(t + 2 = 4: 02\\) pm, es: \\[\\begin{align*} E_{t+1}^{\\textrm{IA}} &amp; = |\\Delta T_{t+1}^{\\textrm{IA}}| \\\\ &amp; = |28.5 - 31.5| \\\\ &amp; = 3 \\ \\textrm{Joules} \\end{align*}\\] Ahora con respecto al sistema de enfriamiento integrado del servidor (es decir, cuando no hay IA), ya que a \\(t + 1 = 4: 01\\) pm teníamos \\(T_{t + 1}^{\\textrm{no IA}} = 29 \\degree C\\), entonces el límite más cercano del rango óptimo de temperaturas sigue siendo \\(24 \\degree C\\), por lo que la energía que el sistema de enfriamiento no inteligente del servidor gastaría entre \\(t + 1 = 4: 01\\) pm y \\(t + 2 = 4 : 02\\) pm, es: \\[\\begin{align*} E_{t+1}^{\\textrm{no IA}} &amp; = |\\Delta T_{t+1}^{\\textrm{no IA}}| \\\\ &amp; = |24 - 29| \\\\ &amp; = 5 \\ \\textrm{Joules} \\end{align*}\\] De ahí la recompensa obtenida entre \\(t+1 = 4:01\\) pm y \\(t+2 = 4:02\\) pm, es: \\[\\begin{align*} \\textrm{Reward} &amp; = E_{t+1}^{\\textrm{no IA}} - E_{t+1}^{\\textrm{IA}} \\\\ &amp; = 5 - 3 \\\\ &amp; = 2 \\end{align*}\\] Y finalmente, la recompensa total obtenida entre \\(t = 4:00\\) pm y \\(t+2 = 4:02\\) pm, es: \\[\\begin{align*} \\textrm{Total Reward} &amp; = (\\textrm{Recompensa obtenida entre $t$ y $t+1$}) + (\\textrm{Recompensa obtenida entre $t+1$ y $t+2$}) \\\\ &amp; = 2.5 + 2 \\\\ &amp; = 4.5 \\end{align*}\\] Ese fue un ejemplo de todo el proceso que sucedió en dos minutos. En nuestra implementación, ejecutaremos el mismo proceso durante 1000 épocas de 5 meses para el entrenamiento del algoritmo, y luego, una vez que nuestra IA esté entrenada, ejecutaremos el mismo proceso durante 1 año completo de simulación para la prueba. El entrenamiento se realizará con Deep Q-Learning, y aquí es donde entra en juego la siguiente sección. 2.2 Solución de IA La solución de IA que resolverá el problema descrito anteriormente es un modelo Deep Q-Learning. Vamos a dar la teoría y las ecuaciones matemáticas detrás de esto. 2.2.1 Q-Learning en Deep Learning El Deep Q-Learning consiste en combinar Q-Learning con una red neuronal artificial. Las entradas son vectores codificados, cada uno de los cuales define un estado del entorno. Estas entradas van a una red neuronal artificial, donde la salida es la acción a ejecutar. Más precisamente, digamos que el sistema tiene \\(n\\) acciones posibles, la capa de salida de la red neuronal está compuesta por \\(n\\) neuronas de salida, cada una correspondiente a los valores Q de cada acción que se juega en el estado actual. Entonces, la acción que se juega es la asociada con la neurona de salida que tiene el valor Q más alto (argmax), o la que devuelve el método softmax. En nuestro caso usaremos argmax. Y dado que los valores Q son números reales, eso hace que nuestra red neuronal sea un RNA para la regresión. Así que, para cada estado \\(s_t\\): la predicción es el valor Q, \\(Q (s_t, a_t)\\) donde \\(a_t\\) es elegido por argmax o softmax, el valor objetivo es \\(r_t + \\gamma \\underset{a}{\\max}(Q(s_{t+1}, a))\\), el error de pérdida entre la predicción y el objetivo es el cuadrado de la diferencia temporal: \\[\\textrm{Loss} = \\frac{1}{2} \\left( r_t + \\gamma \\underset{a}{\\max}(Q(s_{t+1}, a)) - Q(s_t, a_t) \\right)^2 = \\frac{1}{2} TD_t(s_t, a_t)^2.\\] Luego, este error de pérdida se propaga hacia atrás en la red, y los pesos se actualizan de acuerdo con la cantidad que contribuyeron al error. 2.2.2 Experience Replay Notemos que hasta ahora solo hemos considerado las transiciones de un estado \\(s_t\\) al siguiente estado \\(s_{t + 1}\\). El problema con esto es que \\(s_t\\) está casi siempre muy correlacionado con \\(s_{t + 1}\\). Por lo tanto, la red no está aprendiendo mucho. Esto podría mejorarse mucho si, en lugar de considerar solo esta transición anterior, consideramos las últimas m transiciones donde m es un gran número. Este paquete de las últimas m transiciones es lo que se llama Experience Replay o repetición de experiencia. Luego, a partir de esta repetición de experiencia, tomamos algunos bloques aleatorios de transiciones para realizar nuestras actualizaciones. 2.2.3 El cerebro El cerebro, o más precisamente la red neuronal profunda de nuestra IA, será una red neuronal completamente conectada, compuesta de dos capas ocultas, la primera con 64 neuronas y la segunda con 32 neuronas. Y como recordatorio, esta red neuronal toma como entradas los estados del entorno y devuelve como salidas los valores Q para cada una de las 5 acciones. Este cerebro artificial se entrenará con una pérdida de “error cuadrático medio” y un optimizador Adam. Así es como se ve este cerebro artificial: El cerebro artificial: una red neuronal completamente conectada Este cerebro artificial parece complejo de crear, pero lo construiremos muy fácilmente gracias a la increíble librería de Keras. Aquí hay una vista previa de la implementación completa que contiene la parte que construye este cerebro por sí mismo: # Construcción del cerebro class Brain(object): def __init__(self, learning_rate = 0.001, number_actions = 11): self.learning_rate = learning_rate states = Input(shape = (3,)) x = Dense(units = 64, activation = &#39;sigmoid&#39;)(states) y = Dense(units = 32, activation = &#39;sigmoid&#39;)(x) q_values = Dense(units = number_actions, activation = &#39;softmax&#39;)(y) self.model = Model(inputs = states, outputs = q_values) self.model.compile(loss = &#39;mse&#39;, optimizer = Adam(lr = self.learning_rate)) \\end{lstlisting} Como podemos ver con gusto, solo son necesarias un par de líneas de código. 2.2.4 El algoritmo de Deep Q-Learning al completo Resumamos los diferentes pasos de todo el proceso de Deep Q-Learning: Inicialización La memoria de Experience Replay se inicializa en una lista vacía \\(M\\). Elegimos un tamaño máximo de la memoria. En nuestro caso práctico elegimos un tamaño máximo de 100 transiciones. Comenzamos en un primer estado, correspondiente a un momento específico dentro del año. En cada instante \\(t\\), repetimos el siguiente proceso, hasta el final de la época (5 meses en nuestra implementación) Predecimos los valores Q del estado actual \\(s_t\\). Ejecutamos la acción que corresponde al máximo de estos valores Q predichos (método argmax): \\[a_t = \\underset{a}{\\textrm{argmax}} Q(s_t, a)\\] Obtenemos la recompensa: \\[r_t = E_t^{\\textrm{no IA}} - E_t^{\\textrm{IA}}\\] Alcanzamos el siguiente estado\\(s_{t+1}\\). Añadimos la transición actual \\((s_t, a_t, r_t, s_{t+1})\\) a \\(M\\). Seleccionamos un bloque de transiciones al azar \\(B \\subset M\\). Para todas las transiciones\\((s_{t_B}, a_{t_B}, r_{t_B}, s_{t_B+1})\\) del lote aleatorio \\(B\\): Obtenemos las predicciones: \\[Q(s_{t_B}, a_{t_B})\\] Obtenemos los objetivos: \\[r_{t_B} + \\gamma \\underset{a}{\\max}(Q(s_{t_B+1}, a))\\] Calculamos la pérdida entre las predicciones y los objetivos en todo el lote \\(B\\): \\[\\textrm{Loss} = \\frac{1}{2} \\sum_B \\left( r_{t_B} + \\gamma \\underset{a}{\\max}(Q(s_{t_B+1}, a)) - Q(s_{t_B}, a_{t_B}) \\right)^2 = \\frac{1}{2} \\sum_B TD_{t_B}(s_{t_B}, a_{t_B})^2\\] Volvemos a propagar este error de pérdida en la red neuronal y, a través del descenso de gradiente estocástico, actualizamos los pesos según cuánto contribuyeron al error.. 2.3 Implementation Esta implementación se dividirá en 5 partes, cada parte con su propio archivo de Python. Estas 5 partes constituyen el algoritmo general de IA, o Blueprint de la AI, que debe seguirse cada vez que construimos un entorno para resolver cualquier problema comercial con Deep Reinforcement Learning. Aquí están, del Paso 1 al Paso 5: Construcción del entorno. Construcción del cerebro. Implementación del algoritmo de aprendizaje por refuerzo profundo (en nuestro caso será el modelo DQN). Entrenar a la IA. Probar de la IA. Estos son los pasos principales (en ese mismo orden) de la sección de teoría general de IA anterior. Implementemos así nuestra IA para nuestro caso práctico específico, siguiendo este plan de IA, en las siguientes cinco secciones correspondientes a estos cinco pasos principales. Además en cada paso, distinguiremos los subpasos que todavía forman parte del algoritmo general de AI, de los subpasos que son específicos de nuestro caso práctico, escribiendo los títulos de las secciones de código en mayúsculas para todos los subpasos del algoritmo general de AI, y en letras mínimas para todos los subpasos específicos de nuestro caso práctico. Eso significa que cada vez que veamos una nueva sección de código cuyo título está escrito en letras mayúsculas, entonces es el siguiente subpaso del algoritmo general de IA, que también se debe seguir al crear una IA para cualquier otro problema comercial. Así que ahora aquí vamos con el comienzo del viaje: Paso 1 - Construcción el entorno. Este es el archivo de implementación de python más grande de este caso práctico, y del curso. Por lo tanto, asegúrete de descansar antes, recargar las baterías para obtener un buen nivel de energía y, tan pronto como estés listo, ¡abordemos esto juntos! 2.3.1 Paso 1: Construcción del Entorno En este primer paso, vamos a construir el entorno dentro de una clase. ¿Por qué una clase? Porque nos gustaría tener nuestro entorno como un objeto que podamos crear fácilmente con cualquier valor de algunos parámetros que elijamos. Por ejemplo, podemos crear un objeto de entorno para un servidor que tenga un cierto número de usuarios conectados y una cierta velocidad de datos en un momento específico, y otro objeto de entorno para otro servidor que tenga un número diferente de usuarios conectados y un número diferente tasa de datos en otro momento. Y gracias a esta estructura avanzada de la clase, podemos conectar y reproducir fácilmente los objetos del entorno que creamos en diferentes servidores que tienen sus propios parámetros, por lo tanto, regulamos sus temperaturas con varias IA diferentes, de modo que terminamos minimizando el consumo de energía. de un centro de datos completo, tal como lo hizo la DeepMind de Google para los centros de datos de Google con su algoritmo DQN. Esta clase sigue los siguientes subpasos, que son parte del algoritmo general de IA dentro del Paso 1: construcción del entorno: Paso 1-1: Introducción e inicialización de todos los parámetros y variables del entorno. Paso 1-2: Hacer un método que actualice el entorno justo después de que la IA ejecute una acción. Paso 1-3: Hacer un método que restablezca el entorno. Paso 1-4: hacer un método que nos proporcione en cualquier momento el estado actual, la última recompensa obtenida y si el juego ha terminado. Encontrarás toda la implementación de esta clase de creación de entorno en las próximas páginas. Recuerda lo más importante: todas las secciones de código que tienen sus títulos escritos en letras mayúsculas son los pasos del framework de IA o del Blueprint general, y todas las secciones de código que tienen sus títulos escritos en letras minúsculas son específicas de nuestro caso práctico. A continuación se muestra la implementación completa de nuestro primer archivo de python. Los títulos de las secciones de código y los nombres de las variables elegidas son lo suficientemente claros como para comprender lo que se está codificando, pero si necesitas más explicaciones, te recomiendo que vea nuestros videos tutoriales en Udemy donde codificamos todo desde cero, paso a paso, mientras explicamos cada línea. de código en términos de por qué, qué y cómo. Aquí vamos: # Inteligencia Artificial aplicada a Negocios y Empresas - Caso Práctico 2 # Construcción del Etorno # Importar las librerías import numpy as np # CONSTRUCCIÓN DEL ENTORNO EN UNA CLASE class Environment(object): # INTRODUCCIÓN E INICIALIZACIÓN DE TODOS LOS PARÁMETROS Y VARIABLES DEL ENTORNO def __init__(self, optimal_temperature = (18.0, 24.0), initial_month = 0, initial_number_users = 10, initial_rate_data = 60): self.monthly_atmospheric_temperatures = [1.0, 5.0, 7.0, 10.0, 11.0, 20.0, 23.0, 24.0, 22.0, 10.0, 5.0, 1.0] self.initial_month = initial_month self.atmospheric_temperature = \\ self.monthly_atmospheric_temperatures[initial_month] self.optimal_temperature = optimal_temperature self.min_temperature = -20 self.max_temperature = 80 self.min_number_users = 10 self.max_number_users = 100 self.max_update_users = 5 self.min_rate_data = 20 self.max_rate_data = 300 self.max_update_data = 10 self.initial_number_users = initial_number_users self.current_number_users = initial_number_users self.initial_rate_data = initial_rate_data self.current_rate_data = initial_rate_data self.intrinsic_temperature = self.atmospheric_temperature + 1.25 * self.current_number_users + 1.25 * self.current_rate_data self.temperature_ai = self.intrinsic_temperature self.temperature_noai = (self.optimal_temperature[0] + self.optimal_temperature[1]) / 2.0 self.total_energy_ai = 0.0 self.total_energy_noai = 0.0 self.reward = 0.0 self.game_over = 0 self.train = 1 # CREACIÓN DE UN MÉTODO QUE ACTUALIZA EL ENTORNO DESPUÉS DE QUE LA IA EJECUTE UNA ACCIÓN def update_env(self, direction, energy_ai, month): # OBTENCIÓN DE LA RECOMPENSA # Calcular la energía gastada por el sistema de refrigeración del servidor cuando no hay IA energy_noai = 0 if (self.temperature_noai &lt; self.optimal_temperature[0]): energy_noai = self.optimal_temperature[0] - self.temperature_noai self.temperature_noai = self.optimal_temperature[0] elif (self.temperature_noai &gt; self.optimal_temperature[1]): energy_noai = self.temperature_noai - self.optimal_temperature[1] self.temperature_noai = self.optimal_temperature[1] # Cálculo de la recompensa self.reward = energy_noai - energy_ai # Escalado de la recompensa self.reward = 1e-3 * self.reward # OBTENCIÓN DEL SIGUIENTE ESTADO # Actualización de la temperatura atmosférica self.atmospheric_temperature = self.monthly_atmospheric_temperatures[month] # Actualización del número de usuarios conectados self.current_number_users += np.random.randint(-self.max_update_users, self.max_update_users) if (self.current_number_users &gt; self.max_number_users): self.current_number_users = self.max_number_users elif (self.current_number_users &lt; self.min_number_users): self.current_number_users = self.min_number_users # Actualización del ratio de datos self.current_rate_data += np.random.randint(-self.max_update_data, self.max_update_data) if (self.current_rate_data &gt; self.max_rate_data): self.current_rate_data = self.max_rate_data elif (self.current_rate_data &lt; self.min_rate_data): self.current_rate_data = self.min_rate_data # Cálculo de la variación Temperatura Intrinseca past_intrinsic_temperature = self.intrinsic_temperature self.intrinsic_temperature = self.atmospheric_temperature + 1.25 * self.current_number_users + 1.25 * self.current_rate_data delta_intrinsic_temperature = self.intrinsic_temperature - past_intrinsic_temperature # Cálculo de la variación de temperatura causada por la IA if (direction == -1): delta_temperature_ai = -energy_ai elif (direction == 1): delta_temperature_ai = energy_ai # Actualización de la temperatura del servidor cuado hay IA self.temperature_ai += delta_intrinsic_temperature + delta_temperature_ai # Actualización de la temperatura del servidor cuado no hay IA self.temperature_noai += delta_intrinsic_temperature # OBTENCIÓN DEL FIN DE LA PARTIDA if (self.temperature_ai &lt; self.min_temperature): if (self.train == 1): self.game_over = 1 else: self.total_energy_ai += self.optimal_temperature[0] - self.temperature_ai self.temperature_ai = self.optimal_temperature[0] elif (self.temperature_ai &gt; self.max_temperature): if (self.train == 1): self.game_over = 1 else: self.total_energy_ai += self.temperature_ai - self.optimal_temperature[1] self.temperature_ai = self.optimal_temperature[1] # ACTUALIZACIÓN DE LOS SCORES # Actualización del total de energía gastada cuando hay IA self.total_energy_ai += energy_ai # Actualización del total de energía gastada cuando no hay IA self.total_energy_noai += energy_noai # ESCALADO DEL SIGUIENTE ESTADO scaled_temperature_ai = (self.temperature_ai - self.min_temperature) / (self.max_temperature - self.min_temperature) scaled_number_users = (self.current_number_users - self.min_number_users) / (self.max_number_users - self.min_number_users) scaled_rate_data = (self.current_rate_data - self.min_rate_data) / (self.max_rate_data - self.min_rate_data) next_state = np.matrix([scaled_temperature_ai, scaled_number_users, scaled_rate_data]) # DEVOLVER EL SIGUIENTE ESTADO, LA RECOMPENSA Y EL ESTADO DE FIN DEL JUEGO return next_state, self.reward, self.game_over # CREACIÓN DE UN MÉTODO QUE REINICIA EL ENTORNO def reset(self, new_month): self.atmospheric_temperature = self.monthly_atmospheric_temperatures[new_month] self.initial_month = new_month self.current_number_users = self.initial_number_users self.current_rate_data = self.initial_rate_data self.intrinsic_temperature = self.atmospheric_temperature + 1.25 * self.current_number_users + 1.25 * self.current_rate_data self.temperature_ai = self.intrinsic_temperature self.temperature_noai = (self.optimal_temperature[0] + self.optimal_temperature[1]) / 2.0 self.total_energy_ai = 0.0 self.total_energy_noai = 0.0 self.reward = 0.0 self.game_over = 0 self.train = 1 # CREACIÓN DE UN MÉTODO QUE NOS DA, A PARTIR DE CUALQUIER INSTANTE, EL ESTADO, LA RECOMPENSA Y EL FIN DE LA PARTIDA def observe(self): scaled_temperature_ai = (self.temperature_ai - self.min_temperature) / (self.max_temperature - self.min_temperature) scaled_number_users = (self.current_number_users - self.min_number_users) / (self.max_number_users - self.min_number_users) scaled_rate_data = (self.current_rate_data - self.min_rate_data) / (self.max_rate_data - self.min_rate_data) current_state = np.matrix([scaled_temperature_ai, scaled_number_users, scaled_rate_data]) return current_state, self.reward, self.game_over Felicidades por implementar el Paso 1: Construcción del entorno. Ahora pasemos al Paso 2: Construcción del cerebro. 2.3.2 Paso 2: Construcción del cerebro En este Paso 2, vamos a construir el cerebro artificial de nuestra IA, que no es más que una red neuronal completamente conectada. Aquí está de nuevo: El cerebro artificial: una red neuronal completamente conectada Nuevamente, construiremos este cerebro artificial dentro de una clase, por la misma razón que antes, que nos permite crear varios cerebros artificiales para diferentes servidores dentro de un centro de datos. De hecho, tal vez algunos servidores necesitarán cerebros artificiales diferentes con hiperparámetros diferentes que otros servidores. Es por eso que gracias a esta estructura avanzada de python de clase / objeto, podemos cambiar fácilmente de un cerebro a otro para regular la temperatura de un nuevo servidor que requiere una IA con diferentes parámetros de redes neuronales. Construiremos este cerebro artificial gracias a la increíble biblioteca Keras. Desde esta librería utilizaremos la clase Dense() para crear nuestras dos capas ocultas completamente conectadas, la primera con 64 neuronas ocultas y la segunda con 32 neuronas. Y luego, utilizaremos la clase Dense() nuevamente para devolver los valores Q, que tienen en cuenta las salidas de las redes neuronales artificiales. Luego, más adelante en el entrenamiento y los archivos de prueba, utilizaremos el método argmax para seleccionar la acción que tenga el valor Q máximo. Luego, ensamblamos todos los componentes del cerebro, incluidas las entradas y las salidas, creándolo como un objeto de la clase Model() (muy útil para luego guardar y cargar un modelo en producción con pesos específicos). Finalmente, lo compilaremos con una función de pérdidas que medirá el error cuadrático medio y el optimizador de Adam. Así, aquí están los nuevos pasos del algoritmo general de IA: Paso 2-1: Construir la capa de entrada compuesta de los estados de entrada. Paso 2-2: Construir las capas ocultas con un número elegido de estas capas y neuronas dentro de cada una, completamente conectadas a la capa de entrada y entre ellas. Paso 2-3: Construir la capa de salida, completamente conectada a la última capa oculta. Paso 2-4: Ensamblar la arquitectura completa dentro de un modelo de Keras. Paso 2-5: Compilación del modelo con una función de pérdida de error cuadrático medio y el optimizador elegido. Aquí vamos con la implementación: # Inteligencia Artificial aplicada a Negocios y Empresas - Caso Práctico 2 # Construcción del cerebro # Importar las librerías from keras.layers import Input, Dense from keras.models import Model from keras.optimizers import Adam # CONSTRUCCIÓN DEL CEREBRO class Brain(object): # CONSTRUCCIÓN DE UNA RED NEURONAL TOTALMENTE CONECTADA EN EL MÉTODO DE INICIALIZACIÓN def __init__(self, learning_rate = 0.001, number_actions = 5): self.learning_rate = learning_rate # CONSTRUCCIÓN DE LA CAPA DE ENTRADA COMPUESTA DE LOS ESTADOS DE ETRADA states = Input(shape = (3,)) # CONSTRUCCIÓN DE LAS DOS CAPAS OCULTAS TOTALMENTE CONECTADAS x = Dense(units = 64, activation = &#39;sigmoid&#39;)(states) y = Dense(units = 32, activation = &#39;sigmoid&#39;)(x) # CONSTRUCCIÓN DE LA CAPA DE SALIDA, TOTALMENTE CONECTADA A LA ÚLTIMA CAPA OCULTA q_values = Dense(units = number_actions, activation = &#39;softmax&#39;)(y) # ENSAMBLAR LA ARQUITECTURA COMPLETA EN UN MODELO DE KERAS self.model = Model(inputs = states, outputs = q_values) # COMPILAR EL MODELO CON LA FUNCIÓN DE PÉRDIDAS DE ERROR CUADRÁTICO MEDIO Y EL OPTIMIZADOR ELEGIDO self.model.compile(loss = &#39;mse&#39;, optimizer = Adam(lr = learning_rate)) Dropout. Hemos pensado que sería valioso para nosotros incluso agregar una técnica más poderosa en nuestro kit de herramientas de IA: el Dropout. El dropout es una técnica de regularización que evita el sobreajuste. Simplemente consiste en desactivar una cierta proporción de neuronas aleatorias durante cada paso de propagación hacia adelante y hacia atrás. De esa manera, no todas las neuronas aprenden de la misma manera, evitando así que la red neuronal sobreajuste los datos de entrenamiento. Así es como implementamos el Dropout: Primero importamos la función Dropout: from keras.layers:from keras.layers import Input, Dense, Dropout Luego, activamos el Dropout en la primera capa oculta x, con una proporción de 0.1, lo que significa que el 10% de las neuronas se desactivarán aleatoriamente durante el entrenamiento a cada iteración: x = Dense(units = 64, activation = &#39;sigmoid&#39;)(states) x = Dropout(rate = 0.1)(x) Y finalmente, activamos de nuevo e Dropout en la segunda capa oculta y, con una proporción de 0.1, lo que significa que eñ 10% de las neuronas se desactivarán aleatoriamente durante el entrenamiento a cada iteración: y = Dense(units = 32, activation = &#39;sigmoid&#39;)(x) y = Dropout(rate = 0.1)(y) ¡Felicidades! Has implementado el Dropout. Es realmente muy simple, una vez más gracias a Keras. Debajo está la implementación mejorada del fichero new_brain.py con Dropout incluido: # Inteligencia Artificial aplicada a Negocios y Empresas - Caso Práctico 2 # Construcción del cerebro # Importar las librerías from keras.layers import Input, Dense, Dropout from keras.models import Model from keras.optimizers import Adam # CONSTRUCCIÓN DEL CEREBRO class Brain(object): # CONSTRUCCIÓN DE UNA RED NEURONAL TOTALMENTE CONECTADA EN EL MÉTODO DE INICIALIZACIÓN def __init__(self, learning_rate = 0.001, number_actions = 5): self.learning_rate = learning_rate # CONSTRUCCIÓN DE LA CAPA DE ENTRADA COMPUESTA DE LOS ESTADOS DE ETRADA states = Input(shape = (3,)) # CONSTRUCCIÓN DE PRIMERA CAPA OCULTAS TOTALMENTE CONECTADA CON DROPOUT ACTIVADO x = Dense(units = 64, activation = &#39;sigmoid&#39;)(states) x = Dropout(rate = 0.1)(x) # CONSTRUCCIÓN DE SEGUNDA CAPA OCULTAS TOTALMENTE CONECTADA CON DROPOUT ACTIVADO y = Dense(units = 32, activation = &#39;sigmoid&#39;)(x) y = Dropout(rate = 0.1)(y) # CONSTRUCCIÓN DE LA CAPA DE SALIDA, TOTALMENTE CONECTADA A LA ÚLTIMA CAPA OCULTA q_values = Dense(units = number_actions, activation = &#39;softmax&#39;)(y) # ENSAMBLAR LA ARQUITECTURA COMPLETA EN UN MODELO DE KERAS self.model = Model(inputs = states, outputs = q_values) # COMPILAR EL MODELO CON LA FUNCIÓN DE PÉRDIDAS DE ERROR CUADRÁTICO MEDIO Y EL OPTIMIZADOR ELEGIDO self.model.compile(loss = &#39;mse&#39;, optimizer = Adam(lr = learning_rate)) Ahora pasemos al siguiente paso de nuestro algoritmo general de IA: Paso 3: Implementación del algoritmo DQN. 2.3.3 Paso 3: Implementación del algoritmo de Deep Reinforcement Learning En este nuevo archivo de python, simplemente tenemos que seguir el algoritmo Deep Q-Learning que hemos visto anteriormente. Por lo tanto, esta implementación sigue los siguientes subpasos, que forman parte del algoritmo general de IA: Paso 3-1: Introducción e inicialización de todos los parámetros y variables del modelo de DQN. Paso 3-2: Hacer un método que construya la memoria en Repetición de Experiencia. Paso 3-3: Hacer un método que construya y devuelva dos lotes de 10 entradas y 10 objetivos A continuación se muestra el código que sigue a esta nueva parte del Blueprint de IA: # Inteligencia Artificial aplicada a Negocios y Empresas - Caso Práctico 2 # Implementar el algoritmo de Deep Q-Learning con Repetición de Experiencia # Importar las librerías import numpy as np # IMPLEMENTAR EL DEEP Q-LEARNING CON REPETICIÓN DE EXPERIENCIA class DQN(object): # INTRODUCIR E INICIALIZAR TODOS LOS PARÁMETROS Y VARIABLES DEL DQN def __init__(self, max_memory = 100, discount = 0.9): self.memory = list() self.max_memory = max_memory self.discount = discount # CREACIÓN DE UN MÉTODO QUE CONSTRUYA LA MEMORIA DE LA REPETICIÓN DE EXPERIENCIA def remember(self, transition, game_over): self.memory.append([transition, game_over]) if len(self.memory) &gt; self.max_memory: del self.memory[0] # CREACIÓN DEL MÉTODO QUE COSTRUYE DOS LOTES DE ENTRADAS Y OBJETIVOS def get_batch(self, model, batch_size = 10): len_memory = len(self.memory) num_inputs = self.memory[0][0][0].shape[1] num_outputs = model.output_shape[-1] inputs = np.zeros((min(len_memory, batch_size), num_inputs)) targets = np.zeros((min(len_memory, batch_size), num_outputs)) for i, idx in enumerate(np.random.randint(0, len_memory, size = min(len_memory, batch_size))): current_state, action, reward, next_state = self.memory[idx][0] game_over = self.memory[idx][1] inputs[i] = current_state targets[i] = model.predict(current_state)[0] Q_sa = np.max(model.predict(next_state)[0]) if game_over: targets[i, action] = reward else: targets[i, action] = reward + self.discount * Q_sa return inputs, targets 2.3.4 Paso 4: Entrenar la IA Ahora que nuestra IA tiene un cerebro completamente funcional, es hora de entrenarlo. Y esto es exactamente lo que hacemos en este cuarto archivo de python. El proceso es largo, pero muy fácil: comenzamos estableciendo todos los parámetros, luego construimos el entorno creando un objeto de la clase Environment(), luego construimos el cerebro de la IA creando un objeto de la clase Brain(), luego construimos el modelo de Deep Q-Learning creando un objeto de la clase DQN(), y finalmente lanzamos la fase de entrenamiento que conecta todos estos objetos, durante 1000 echos de 5 meses cada uno. Notarás en la fase de entrenamiento de entrenamiento que también exploramos un poco cuando llevamos a cabo las acciones las acciones. Esto consiste en ejecutar algunas acciones aleatorias de vez en cuando. En nuestro Caso Práctico, esto se realizará el 30% de las veces, ya que usamos un parámetro de exploración \\(\\epsilon = 0.3\\), y luego lo forzamos a ejecutar una acción aleatoria al obtener un valor aleatorio entre 0 y 1 que está por debajo de \\(\\epsilon = 0.3\\)). La razón por la que hacemos un poco de exploración es porque mejora el proceso de aprendizaje por refuerzo profundo. Este truco se llama: Exploración vs. Explotación. Luego, además, también veremos que utilizamos una técnica de detención temprana, que se asegurará de detener el entrenamiento si ya no hay una mejora palpable en el rendimiento. Destaquemos estos nuevos pasos que aún pertenecen a nuestro algoritmo general de IA: Paso 4-1: Construcción del entorno creando un objeto de la clase Environment. Paso 4-2: Construyendo el cerebro artificial creando un objeto de la clase de Brain Paso 4-3: Construyendo el modelo DQN creando un objeto de la clase DQN. Paso 4-4: Elección del modo de entrenamiento. Paso 4-5: Comenzar el entrenamiento con un bule for durante más de 100 epochs de períodos de 5 meses. Paso 4-6: Durante cada epoch, repetimos todo el proceso de Deep Q-Learning, al tiempo que exploramos el 30% de las veces. Y ahora implementemos esta nueva parte, Paso 4: Entrenamiento de la IA, de nuestro algoritmo general. A continuación se muestra la implementación completa de este cuarto archivo de python. Una vez más, los títulos de las secciones de código y los nombres de las variables elegidas son lo suficientemente claros como para comprender lo que se programa en cada caso Aquí vamos: # Inteligencia Artificial aplicada a Negocios y Empresas - Caso Práctico 2 # Entrenamiento de la IA # Instalación de Keras # conda install -c conda-forge keras # Importar las librerías y el resto de ficheros de python import os import numpy as np import random as rn import environment import brain import dqn # Establecer semillas para la reproducibilidad del experimento os.environ[&#39;PYTHONHASHSEED&#39;] = &#39;0&#39; np.random.seed(42) rn.seed(12345) # CONFIGURACIÓN DE LOS PARÁMETROS epsilon = .3 number_actions = 5 direction_boundary = (number_actions - 1) / 2 number_epochs = 100 max_memory = 3000 batch_size = 512 temperature_step = 1.5 # CONSTRUCCIÓN DEL ENTORNO CREANDO UN OBJETO DE LA CLASE ENVIRONMENT CLASS env = environment.Environment(optimal_temperature = (18.0, 24.0), initial_month = 0, initial_number_users = 20, initial_rate_data = 30) # CONSTRUCCIÓN DEL CEREBRO CREADO UN OBJETO DE LA CLASE BRAIN brain = brain.Brain(learning_rate = 0.00001, number_actions = number_actions) # CONSTRUCCIÓN DEL MODELO DE DQN CREANDO UN OBJETO DE LA CLASE DQN dqn = dqn.DQN(max_memory = max_memory, discount = 0.9) # ELECCIÓN DEL MODO DE ENTRENAMIENTO train = True # Entrenamiento de la IA env.train = train model = brain.model early_stopping = True patience = 10 best_total_reward = -np.inf patience_count = 0 if (env.train): # ARRANCAR EL BUCLE SOBRE TODAS LAS EPOCHS (1 Epoch = 5 Meses) for epoch in range(1, number_epochs): # INICIALIZACIÓN DE LAS VARIABLES TANTO DEL ENVIRONMENT COMO DEL BUCLE DE ENTRENAMIENTO total_reward = 0 loss = 0. new_month = np.random.randint(0, 12) env.reset(new_month = new_month) game_over = False current_state, _, _ = env.observe() timestep = 0 # EMPEZAR EL BUCLE SOBRE TODOS LOS TIMESTEPS (1 Timestep = 1 Minuto) EN UN EPOCH while ((not game_over) and timestep &lt;= 5 * 30 * 24 * 60): # EJECUTAR LA SIGUIENTE ACCIÓN POR EXPLORACIÓN if np.random.rand() &lt;= epsilon: action = np.random.randint(0, number_actions) if (action - direction_boundary &lt; 0): direction = -1 else: direction = 1 energy_ai = abs(action - direction_boundary) * temperature_step # EJECUTAR LA SIGUIENTE ACCIÓN POR INFERENCIA else: q_values = model.predict(current_state) action = np.argmax(q_values[0]) if (action - direction_boundary &lt; 0): direction = -1 else: direction = 1 energy_ai = abs(action - direction_boundary) * temperature_step # ACTUALIZACIÓN DEL ENTORNO BUSCANDO EL SIGUIENTE ESTADO next_state, reward, game_over = env.update_env(direction, energy_ai, int(timestep / (30*24*60))) total_reward += reward # ALMACENAR LA NUEVA TRANSICIÓN EN LA MEMORIA dqn.remember([current_state, action, reward, next_state], game_over) # REUNIR EN DOS LOTES SEPARADOS LAS ENTRADAS Y LOS OBJETIVOS inputs, targets = dqn.get_batch(model, batch_size = batch_size) # CALCULAR LA PÉRDIDA EN LOS DOS LOTES DE ENTRADAS Y OBJETIVOS loss += model.train_on_batch(inputs, targets) timestep += 1 current_state = next_state # IMPRIMIR EL RESULTADO DE ENTREAMIENTO PARA CADA EPOCH print(&quot;\\n&quot;) print(&quot;Epoch: {:03d}/{:03d}&quot;.format(epoch, number_epochs)) print(&quot;Total Energy spent with an AI: {:.0f}&quot;.format(env.total_energy_ai)) print(&quot;Total Energy spent with no AI: {:.0f}&quot;.format(env.total_energy_noai)) # EARLY STOPPING if (early_stopping): if (total_reward &lt;= best_total_reward): patience_count += 1 elif (total_reward &gt; best_total_reward): best_total_reward = total_reward patience_count = 0 if (patience_count &gt;= patience): print(&quot;Early Stopping&quot;) break # GUARDAR EL MODELO model.save(&quot;model.h5&quot;) Después de ejecutar el código, ya vemos un buen rendimiento de nuestra IA durante el entrenamiento, gastando la mayor parte del tiempo menos energía que el sistema alternativo, es decir, el sistema de enfriamiento integrado del servidor. Pero ese es solo el entrenamiento, ahora necesitamos ver si también obtenemos un buen rendimiento en una nueva simulación de 1 año. Ahí es donde entra en juego nuestro próximo y último archivo de python. 2.3.5 Paso 5: Probar nuestra IA Ahora, de hecho, tenemos que probar el rendimiento de nuestra IA en una situación completamente nueva. Para hacerlo, ejecutaremos una simulación de 1 año, solo en modo de inferencia, lo que significa que no habrá entrenamiento en ningún momento. Nuestra IA solo devolverá predicciones durante un año completo de simulación. Luego, gracias a nuestro objeto Environment, obtendremos al final la energía total gastada por la IA durante este año completo, así como la energía total gastada por el sistema de enfriamiento integrado del servidor. Eventualmente compararemos estas dos energías totales gastadas, simplemente calculando su diferencia relativa (en %), lo que nos dará exactamente la energía total ahorrada por la IA. ¡Abróchate el cinturón para los ver los resultados finales, que revelaremos al final de esta Parte 2! En términos de nuestro algoritmo de IA, aquí para la implementación de prueba casi tenemos lo mismo que antes, excepto que esta vez, no tenemos que crear un objeto Brain ni un objeto modelo DQN, y por supuesto no debemos ejecutar el proceso de Deep Q-Learning durante las épocas de entrenamiento. Sin embargo, tenemos que crear un nuevo objeto de Environment, y en lugar de crear un cerebro, cargaremos nuestro cerebro artificial con sus pesos pre-entrenados del entrenamiento anterior que ejecutamos en el Paso 4 - Entrenamiento de la IA. Por lo tanto, demos los subpasos finales de esta parte final del algoritmo de IA: Paso 5-1: Construcción de un nuevo entorno creando un objeto de la clase Environment. Paso 5-2: Carga del cerebro artificial con sus pesos pre-entrenados del entrenamiento anterior. Paso 5-3: Elección del modo de inferencia. Paso 5-4: Iniciación de la simulación de 1 año. Paso 5-5: En cada iteración (cada minuto), nuestra IA solo ejecuta la acción que resulta de su predicción, y no se lleva a cabo ninguna exploración o entrenamiento de Deep Q-Learning. Y ahora implementemos esta quinta y última parte, Paso 5: Prueba de la IA. Una vez más, a continuación se muestra la implementación completa de nuestro último archivo de Python. Los títulos de las secciones de código y los nombres de las variables elegidas son lo suficientemente claros como para comprender lo que se está programando, pero si necesitas más explicaciones, te recomiendo que veas nuestros videos tutoriales en Udemy donde programamos todo desde cero, paso a paso, mientras explicamos cada línea de código en términos de por qué, qué y cómo. Aquí vamos: # Inteligencia Artificial aplicada a Negocios y Empresas - Caso Práctico 2 # Prueba de la AI # Instalación de Keras # conda install -c conda-forge keras # Importar las librerías y el resto de ficheros de python import os import numpy as np import random as rn from keras.models import load_model import environment # Establecer semillas para la reproducibilidad del experimento os.environ[&#39;PYTHONHASHSEED&#39;] = &#39;0&#39; np.random.seed(42) rn.seed(12345) # CONFIGURACIÓN DE LOS PARÁMETROS number_actions = 5 direction_boundary = (number_actions - 1) / 2 temperature_step = 1.5 # CONSTRUCCIÓN DEL ENTORNO CREANDO UN OBJETO DE LA CLASE ENVIRONMENT env = environment.Environment(optimal_temperature = (18.0, 24.0), initial_month = 0, initial_number_users = 20, initial_rate_data = 30) # CARGA DEL MODELO PRE-ENTRENADO model = load_model(&quot;model.h5&quot;) # ELECCIÓN DEL MODO train = False # EJECUTAR UN AÑO DE SIMULACIÓN EN MODO INFERENCIA env.train = train current_state, _, _ = env.observe() for timestep in range(0, 12 * 30 * 24 * 60): q_values = model.predict(current_state) action = np.argmax(q_values[0]) if (action - direction_boundary &lt; 0): direction = -1 else: direction = 1 energy_ai = abs(action - direction_boundary) * temperature_step next_state, reward, game_over = env.update_env(direction, energy_ai, int(timestep / (30*24*60))) current_state = next_state # IMPRIMIR LOS RESULTADOS DE ENTREAMIENTO PARA CADA EPOCH print(&quot;\\n&quot;) print(&quot;Total Energy spent with an AI: {:.0f}&quot;.format(env.total_energy_ai)) print(&quot;Total Energy spent with no AI: {:.0f}&quot;.format(env.total_energy_noai)) print(&quot;ENERGY SAVED: {:.0f} %&quot;.format((env.total_energy_noai - env.total_energy_ai) / env.total_energy_noai * 100)) Y finalmente, obtenemos en los resultados impresos que el consumo total de energía ahorrado por la IA es …: \\[\\textrm{Total Energy saved by the AI} = 39 \\ \\% \\ !\\] ¡Exactamente igual a lo que la DeepMind de Google logró en 2016! De hecho, si en Google escribes: DeepMind reduce la factura de enfriamiento de Google, verá que el resultado que lograron es del 40 %. Muy cerca de la nuestra! Por lo tanto, lo que hemos construido es seguramente excelente para nuestro cliente comercial, ya que nuestra IA les ahorrará muchos costes. De hecho, recuerda que gracias a nuestra estructura orientada a objetos (trabajando con clases y objetos), podemos tomar fácilmente nuestros objetos creados en esta implementación que hicimos para un servidor, y luego conectarlos a otros servidores, para que al final podamos ¡terminar ahorrando en el consumo total de energía de un centro de datos al completo! Así es como Google ahorró miles de millones de dólares en costes relacionados con la energía, gracias a su modelo DQN creado por la IA DeepMind. 2.4 Resumen: El Algoritmo General de IA Recapitulemos y proporcionemos el algoritmo completo de IA, para que puedas imprimirlo y ponerlo en tu pared. Paso 1: Construcción del Entorno Paso 1-1: Introducción e inicialización de todos los parámetros y variables del entorno. Paso 1-2: Hacer un método que actualice el entorno justo después de que la IA ejecute una acción. Paso 1-3: Hacer un método que restablezca el entorno. Paso 1-4: hacer un método que nos proporcione en cualquier momento el estado actual, la última recompensa obtenida y si el juego ha terminado. **Paso 2: Construcción del Cerebro Paso 2-1: Construir la capa de entrada compuesta de los estados de entrada. Paso 2-2: Construir las capas ocultas con un número elegido de estas capas y neuronas dentro de cada una, completamente conectadas a la capa de entrada y entre ellas. Paso 2-3: Construir la capa de salida, completamente conectada a la última capa oculta. Paso 2-4: Ensamblar la arquitectura completa dentro de un modelo de Keras. Paso 2-5: Compilación del modelo con una función de pérdida de error cuadrático medio y el optimizador elegido. Paso 3: Implementación del algoritmo de Deep Reinforcement Learning Paso 3-1: Introducción e inicialización de todos los parámetros y variables del modelo de DQN. Paso 3-2: Hacer un método que construya la memoria en Repetición de Experiencia. Paso 3-3: Hacer un método que construya y devuelva dos lotes de 10 entradas y 10 objetivos Paso 4: Entrenamiento de la IA Paso 4-1: Construcción del entorno creando un objeto de la clase Environment. Paso 4-2: Construyendo el cerebro artificial creando un objeto de la clase de Brain Paso 4-3: Construyendo el modelo DQN creando un objeto de la clase DQN. Paso 4-4: Elección del modo de entrenamiento. Paso 4-5: Comenzar el entrenamiento con un bule for durante más de 100 epochs de períodos de 5 meses. Paso 5: Probar la IA Paso 5-1: Construcción de un nuevo entorno creando un objeto de la clase Environment. Paso 5-2: Carga del cerebro artificial con sus pesos pre-entrenados del entrenamiento anterior. Paso 5-3: Elección del modo de inferencia. Paso 5-4: Iniciación de la simulación de 1 año. Paso 5-5: En cada iteración (cada minuto), nuestra IA solo ejecuta la acción que resulta de su predicción, y no se lleva a cabo ninguna exploración o entrenamiento de Deep Q-Learning. "],
["parte-3-maximización-de-beneficios-revenues.html", "Parte 3 Parte 3 - Maximización de Beneficios Revenues 3.1 Caso Práctico: Maximizing Revenue of an Online Retail Business", " Parte 3 Parte 3 - Maximización de Beneficios Revenues Congratulations for smashing the first and second case studies! Now let’s move on to a very different kind of Artificial Intelligence, that has tremendous efficiency for businesses, and that you must absolutely know about. 3.1 Caso Práctico: Maximizing Revenue of an Online Retail Business 3.1.1 Problem to solve Imagine an Online Retail Business that has million of customers. These customers are only people buying some products on the website from time to time, getting them delivered at home. The business is doing good, but the board of executives has decided to take some action plan to maximize revenue even more. This plan consists of offering to the customers the option to subscribe to a premium plan, which will give them some benefits like reduced prices, special deals, etc. This premium plan is offered at a yearly price of $ 100, and the goal of this online retail business is of course to get the maximum customers to subscribe to this premium plan. Let’s do some quick maths to give us some motivation for building an AI to maximize the revenues of this business. Let’s say that this online retail business has 100 million customers. Now consider two conversion strategies trying to convert the customers to the premium plan: a bad one, with a conversion rate of 1%, and a good one, with a conversion rate of 11%. If the business deploys the bad strategy, it will make in one year a total extra revenue coming from the premium plan subscription of: \\(100,000,000 \\times 0.01 \\times 100 = \\$ 100,000,000\\). On the other hand, if the business deploys the good strategy, it will make in one year a total extra revenue coming from the premium plan subscription of \\(100,000,000 \\times 0.11 \\times 100 = \\$ 1,100,000,000\\). Thus, by figuring out the good strategy to deploy, the business maximized its extra revenues by making 1 Billion extra dollars. In this previous Utopian example, we only had two strategies, and besides we knew their conversion rates. However in our Caso Práctico we will be facing 9 different strategies, and our AI will have no idea of which is the best one, and absolutely no prior information on any of their conversion rates. However we will make the assumption that each of these 9 strategies does have a fixed conversion rate. These strategies were carefully and smartly elaborated by the marketing team, and each of them has the same goal: convert the maximum clients to the premium plan. However, these 9 strategies are all different. They have different forms, different packages, different ads, and different special deals to convince and persuade the clients to subscribe to the premium plan. Of course, the marketing team has no idea of which of these 9 strategies is the best one. But they want to figure it out as soon as possible, and by saving the maximum costs, which one has the highest conversion rate, because they know how finding and deploying that best strategy can significantly maximize the revenues. Also, the marketing experts choose not to send an email to their 100 million customers, because that would be costly and they would risk spamming too many customers. Instead they will subtly look for that best strategy through online learning. What is online learning? It will consist of deploying a strategy each time a customer browses the online retail business website to hang out inside or buy some products. Then as the customer navigates the website, he or she will suddenly get a pop-up ad, suggesting him or her to subscribe to the premium plan. And for each customer browsing the website, only one of the 9 strategies will be deployed. Then the user will choose, or not, to take action and subscribe to the premium plan. If the customer subscribes, it is a success, otherwise, it is a failure. The more customers we do this with, the more feed-backs we get, and the better we could get an idea of what is the best strategy. But of course, we will not figure that out manually, visually, or with some simple maths. Instead we want to implement the smartest algorithm that will figure out what is the best strategy in the least amount of time. And that’s for the same two reasons: first because deploying each strategy has a cost (e.g. coming from the pop-up ad), and second because the company wants to annoy the least customers with their ad. Let’s sum up the differences in features of these 9 strategies simply this way: In order to simulate this Caso Práctico, we will assume these strategies have the following conversion rates: However, please make sure to understand that in a real life situation we would have no idea of what would be these conversion rates. We only know them here for simulation purposes, just so that we can check in the end that our AI manages to figure out the best strategy, which according to the table above, is strategy number 7 (highest conversion rate). Online Learning is a special branch of Artificial Intelligence, where there is not much need of defining the states and actions. Here, a state would simply be a specific customer onto whom we deploy a strategy, and the action would simply be the strategy selected. But you will see further in the AI algorithm that we don’t have the states as inputs and the actions as outputs like in our two previous case studies, because this time we are not doing Q-Learning or Deep Q-Learning. Here we are doing online learning. However we do have to define the rewards, since again we will have to make a rewards matrix, where each row corresponds to a user being deployed a strategy, and each column corresponds to one of the 9 strategies. Therefore, since we will actually run this online learning experiment on 10,000 customers, this rewards matrix will have 10,000 rows and 9 columns. Then, each cell will get either a 0 if the customer doesn’t subscribe to the premium plan after being approached by the selected strategy, and a 1 if the customer does subscribe after being approached by the selected strategy. And the values in the cell are exactly, the rewards. Now a very important thing to understand is that the rewards matrix is only here for the simulation, and in real life we would have no such thing as a rewards matrix. We will just simulate 10,000 customers successively being approached by one of the 9 strategies, and thanks to the rewards matrix we will simulate the decision of the customer to subscribe yes or no to the premium plan. If the cell corresponding to a specific customer and a specific selected strategy has a 1, that will simulate a conversion by the customer to the premium plan, and if the cell has a 0, that will simulate a rejection. Here is below as an example the first rows of a simulated rewards matrix: According to this simulation, all given in the above rewards matrix: Thompson Sampling will collect the feed-backs of whether or not each of these customers subscribe to the premium plan one after the other, and thanks to its powerful algorithm, will quickly figure out the strategy with the highest conversion rate, that is the best one to be deployed on the millions of customers, thus maximizing the company’s income from this new revenue stream. The AI solution that will figure out the best strategy is called “Thompson Sampling”. It is by far the best model for that kind of problems in this Online Learning branch of Artificial Intelligence. To recap, each time a new customer connects to the online retail business website, that’s a new round \\(n\\) and we select one of our 9 strategies to attempt a conversion (subscription to the premium plan). The goal is to select the best strategy at each round, over many rounds. Here is how Thompson Sampling will do that: Each strategy has its own beta distribution. Over the rounds, the beta distribution of the strategy with the highest conversion rate will be progressively shifted to the right, and the beta distributions of the strategies with lower conversion rates will be progressively shifted to the left (Steps 1 and 3). Therefore, because of Step 2, the strategy with the highest conversion rate will be more and more selected. Below is a graph displaying three beta distributions of three strategies, that will help you visualize this: Let’s provide the whole implementation of Thompson Sampling for this specific Caso Práctico, following the same simulation given above. While implementing Thompson Sampling, we will also implement the Random Selection algorithm, which will simply select a random strategy at each round. This will be our benchmark to evaluate the performance of our Thompson Sampling model. Of course, Thompson Sampling and the Random Selection algorithm will be competing on the same simulation, that is on the same rewards matrix. And in the end, after the whole simulation is done, we will assess the performance of Thompson Sampling by computing the relative return, defined by the following formula: \\[\\begin{equation*} \\textrm{Relative Return} = \\frac{\\textrm{(Total Reward of Thompson Sampling)} - (\\textrm{Total Reward of Random Selection})}{\\textrm{Total Reward of Random Selection}} \\times 100 \\end{equation*}\\] We will also plot the histogram of selected ads, just to check that the strategy with the highest conversion rate (Strategy 7) was the one selected the most. So if you are ready, here we go: First, we import the required libraries and we set the parameters (\\(N = 10000\\) customers and \\(d = 9\\) strategies): Then, we create the simulation, by building the rewards matrix of 10000 rows corresponding to the customers, and 9 columns corresponding to the strategies. At each round and for each strategy, we draw a random number between 0 and 1, and if this random number is lower than the conversion rate of the strategy, the reward will be 1. Otherwise, it will be 0. That way we simulate the conversion rates listed above for our 9 strategies: Then, we will loop over the 10000 rows (or rounds) of this rewards matrix, and at each round we will get two separate strategy selections: one from the Random Selection algorithm, and one from Thompson Sampling. We keep track of the strategies selected by each of these two algorithms, and we compute the total reward accumulated over the rounds by each of them. Thompson Sampling is implemented following exactly the Steps 1, 2 and 3 provided above: Then we compute the final score, which is the relative return of Thompson Sampling with respect to our benchmark that is the Random Selection: And buckle up, by executing this code we obtain a final relative return, of…: \\[\\begin{equation*} \\textrm{Relative Return} = 91 \\ \\% \\ ! \\end{equation*}\\] In other words, Thompson Sampling almost doubled the performance of our Random Selection benchmark. And finally, we plot the Histogram of the selected strategies, to check that indeed Strategy 7 (of index 6) was the one most selected, since it is the one having the highest conversion rate: By executing this final code, we obtain the following histogram: And indeed, it is well the strategy of index 6, that is Strategy 7, that was, by far, selected the most. Thompson Sampling was quickly able to identify it. And in fact, if we re-run the same code but with only 1000 customers, we realize that Thompson Sampling is still able to identify Strategy 7 as the best one. Accordingly, Thompson Sampling surely did an amazing job for this Online Retail Business. Because not only it was able to identify the best strategy quickly in a few number of rounds, that is with a few customers, which saved a lot on the advertising and operating related costs. But also because of course, it was able to clearly figure out the strategy with the highest conversion rate. And indeed, if this Online Retail Business has 100 million customers, and if the premium plan has a price of $ 100 per year, then deploying this best strategy that has a conversion rate of 20 % would lead to generate an extra revenue of…: \\[\\begin{equation*} \\textrm{Extra Revenues generated} = 100000000 \\times 0.2 \\times 100 = \\textrm{\\$ $2$ Billion !!} \\end{equation*}\\] In other words, Thompson Sampling clearly and quickly maximized the revenues of this online retail business, while also saving a lot on the costs, therefore maximizing as well the profitability of the business. The regret curve of a model (Random Strategy or Thompson Sampling) is the plot of the difference between the best strategy and the deployed model, with respect to the rounds. The best strategy is computed by simply getting, at each round, the maximum of the accumulated rewards over all the different strategies. Therefore in our implementation, we will get the best strategy the following way: Then, the regret of Thompson Sampling is simply computed as the difference between the best strategy and the Thompson Sampling model: And same, the regret of the Random Strategy is simply computed as the difference between the best strategy and the random selection algorithm: And finally of course, we plot the regret over the rounds with this simple code (we don’t have to specify the x-coordinates in the plt.plot() function because the rounds are already indexes from 0 to N): Let’s look at the results in the next page, for both the Random Strategy and Thompson Sampling. If we plot the Regret Curve of the Random Strategy, we thus obtain the following: And of course, we observe absolutely no convergence of the Random Strategy towards the Best Strategy. However if now we plot the Regret Curve of the Thompson Sampling model, we get the following beautiful curve: And obviously, Thompson Sampling is converging very well towards the best strategy. Eventually, here is the final code including that Regret Curve of Thompson Sampling: "],
["conclusion.html", "Conclusion", " Conclusion Thank you so much again for joining this course, and congratulations for completing it! We highly recommend that you keep this book close to you whenever you are building an AI to solve a business problem. Or at least, try to keep the general AI Framework. On our side, it was our pleasure making this course, and writing this book. Don’t hesitate to leave a review in the course if you wish. Until then, enjoy AI for Business! "],
["annex-1-artificial-neural-networks.html", "Parte 4 Annex 1: Artificial Neural Networks", " Parte 4 Annex 1: Artificial Neural Networks In this annex part you will find all the intuition and theory of Artificial Neural Networks, which are at the heart of the Deep Q-Learning model we build in Part 2 - Minimizing the Costs. Here is the plan of attack to study Artificial Neural Networks: The neuron is the basic building block of Artificial Neural Networks. In the images below are actual real life neurons which have been smeared onto a glass, colored a little bit and observed through a microscope: As we can see, they have the structure of a body with lots of different branches coming out of them. But the question is: How can we recreate that in a machine? Indeed, we really need to recreate it in a machine since the whole purpose of Deep Learning is to mimic how the human brain works, in the hope that by doing so we are going to create something amazing: a powerful infrastructure for machines to be able to learn. Why do we hope for that? Because the human brain just happens to be one of the most powerful learning tools on the planet. So we just hope that if we recreate it then we will have something as awesome as that. So our challenge right now, that is our very first step to creating artificial neural networks, is to recreate a neuron. So how do we do it? Well, first of all let’s have a closer look at what a neuron actually is. The image below was first created by a Spanish neuroscientist and Chagga Ramon Yi Kajal in 1899: This neuroscientist dyed in neurons in actual brain tissue, and looked at them under a microscope. While he was looking at them he actually drew what he saw, which is exactly what we see on the above image. Today technology has advanced quite a lot allowing us to see neurons much closer in more detail so that we can actually draw what it looks like diagrammatically. Above is a neuron. This neuron exchanges signals between its neighbour neurons. The dendrites are the receivers of the signal and the axon is the transmitter of the signal. Here is an image of how it all works conceptually: We can see that the dendrites of the neuron are connected to the axons of other neurons above it. Then the signal travels down its axon and passes on to the dendrites of the next neuron. That is how they are connected and how a neuron works. Thus now is the time to move from neuroscience to technology. Here is how a neuron is represented inside an Artificial Neural Network: Just as a human neuron, it gets some input signals and it has an output signal. The blue arrow connecting the input signals to the neuron, and the neuron to the output signal, are like the synapses in the human neuron. But here in the machine neuron, what are exactly going to be these input and output signals? Well, the input signals are going to be the scaled independent variables composing the states of the environment, which remember in the case study are the temperature of the server, the number of users and the rate of data transmission, and the output signal will be the output values, which in the Deep Q-Learning model are always the Q-Values. Hence we get the general representation of a neuron for machines: And now to finish with the neuron, let’s add the last missing elements in this representation, but also the most important ones: the weights. Each synapse (blue arrow) will be attributed a weight. The larger is the weight, the stronger the signal will be through the synapse. And what is fundamental to understand is that, these weights, will be what the machine will update and update over time to improve the predictions. Let’s represent them on the previous graphic, to make sure we all visualize them well: The Activation Function is the function \\(\\phi\\) operating inside the neuron, that will take as inputs the linear sum of the input values multiplied by their associated weights, and that will return the output value: such that: \\[\\begin{equation*} y = \\phi\\left( \\sum_{i=1}^m w_i x_i \\right) \\end{equation*}\\] Now what exactly is going to be the function \\(\\phi\\)? There can be many of them, but let’s give the four most used ones, including of course the one we used in Part 2 - Minimizing Costs: Let’s have a look at them one by one. The Threshold Activation Function is simply defined by the following: \\[\\begin{equation*} \\phi(x) = \\begin{cases} 1 \\textrm{ if } x \\ge 0 \\\\ 0 \\textrm{ if } x &lt; 0 \\end{cases} \\end{equation*}\\] so that we get the following curve: This means that the signal passing through the neuron will be discontinuous, and will only be activated if: \\[\\begin{equation*} \\sum_{i=1}^m w_i x_i \\ge 0 \\end{equation*}\\] Now let’s have a look at the next activation function: the Sigmoid Activation function. The Sigmoid Activation Function is the most effective and widely used one in Artificial Neural Networks, but mostly inside the last hidden layer (if we are dealing with a Deep Neural Network composed of several hidden layers) passing the signal towards the output layer. The Sigmoid Activation Function is defined by the following: \\[\\begin{equation*} \\phi(x) = \\frac{1}{1+e^{-x}} \\end{equation*}\\] so that we get the following curve: This means that the signal passing through the neuron will be continuous and will always be activated. And the higher is \\(\\sum_{i=1}^m w_i x_i\\), the stronger will be that signal. Now let’s have a look at another widely used activation function: the Rectifier Activation function. You will find it in most of the Neural Networks, but mostly inside the hidden layers, as opposed to the sigmoid function which is rather used for the output layer. The Threshold Activation Function is simply defined by the following: \\[\\begin{equation*} \\phi(x) = \\max(x,0) \\end{equation*}\\] so that we get the following curve: This means that the signal passing through the neuron will be continuous, and will only be activated if: \\[\\begin{equation*} \\sum_{i=1}^m w_i x_i \\ge 0 \\end{equation*}\\] And the higher is \\(\\sum_{i=1}^m w_i x_i\\) above 0, the stronger will be that signal. Now let’s have a look at the next activation function: the Hyperbolic Tangent Activation function. The Hyperbolic Tangent activation function is less widely used, though it can sometimes be a more relevant choice in some Artificial Neural Networks, especially when the inputs are standardized. The Hyperbolic Tangent Activation Function is defined by the following: \\[\\begin{equation*} \\phi(x) = \\frac{1-e^{-2x}}{1+e^{-2x}} \\end{equation*}\\] so that we get the following curve: This means that the signal passing through the neuron will be continuous and will always be activated. The higher \\(\\sum_{i=1}^m w_i x_i\\) is above 0, the stronger will be that signal. The lower \\(\\sum_{i=1}^m w_i x_i\\) is below 0, the weaker will be that signal. So that raises the question: which activation function should we choose, or, more frequently asked, how do we know which one to choose? Good news, the answer is simple, and let’s give it inside a small blueprint. That actually depends on what is returned as the dependent variable. If it is a binary outcome 0 or 1, then a good choice would be the threshold activation function. If what you want to be returned is the probability that the dependent variable is 1, then an excellent choice is the sigmoid activation function, since its sigmoid curve is a perfect fit to model probabilities. Here is this small blueprint highlighted in this slide: But then when should I use the other two activation functions, i.e. the Rectifier activation function and the Hyperbolic Tangent activation function? Easy again, the Rectifier and the Hyperbolic Tangent activation functions should be used within the hidden layers of a Deep Neural Network (with more than one hidden layer), except the last hidden layer leading to the output layer for which it is recommended to use a Sigmoid Activation function. Let’s recap this again inside the following slide: And lastly, how to choose between the Rectifier activation function and the Hyperbolic Tangent activation function in the hidden layers? Still easy, you should consider using the Rectifier activation function when the inputs are normalized (scaled between 0 and 1), and the Hyperbolic Tangent activation function when the inputs are standardized (scaled between -1 and +1): Now let’s move on to the next section to explain, how Neural Networks work. To explain this, let’s consider the problem of predicting Real Estate prices. We have some independent variables which we are going to use to predict the price of houses and apartments. For simplicity purpose, and to be able to represent everything in a graph, let’s say that our independent variables (our predictors) are the following: Then, our dependent variable is of course the apartment price to predict. Each of the independent variables is attributed a weight, in such a way that the higher is the weight, the more effect the independent variable will have on the dependent variable, that is, the stronger predictor it will be of the dependent variable. Hence, as soon as new inputs enter the Neural Network, the signals are forward-propagated from each of the inputs, reaching the neurons of the hidden layer. Then inside each neuron of the hidden layer, the activation function is applied, so that the lower is the weight of the input, the more the activation function will block the signal coming from that input, and the higher is the weight of that input, the more the activation will let that signal go through. And finally, all the signals coming from the hidden neurons, more or less blocked by the activation functions, are forward propagated to the output layer, to return the final outcome, that is the price prediction. Let’s represent this in the following graphic: Simply put, Neural Networks learn by updating, over many iterations, the weights of all the inputs and hidden neurons (when having several hidden layers), towards always the same goal to reduce the loss error between the predictions and the real values. Indeed, in order for Neural Networks to learn, we need the actual values, which are also called the targets. In our example above about Real Estate Pricing, the actual values are the real prices of the houses and apartments in sales. These real prices depend on the independent variables listed above (area, number of bedrooms, distance to city, and age), and the Neural Network will learn to make better predictions of these prices, by running the following process: Let’s represent the two main phases, forward-propagation and back-propagation, of this whole process in the two following separate graphics (see next page): When people talk about Machine Learning or Deep Learning they mostly talk about algorithms that are used. But the real questions are, why are those algorithms considered to be Machine Learning or Deep Learning algorithms and others are not? What is the underlining technique that connects them? The answer to the first question is pretty intuitive: those algorithms are considered to learn their parameters by themselves. This property was not very common before and most algorithms were hand tuned by engineers to achieve a required specification/goal. But then Gradient Descent came on stage and most algorithms that did not work before suddenly made sense and started to optimize themselves. So is Gradient Descent magic? Well to someone it is, but for us it is a mathematical algorithm that is used to optimize a model that has its internal parameters (weights). Or, to be more technical, let’s see what Wikipedia says about it: That is a correct but mouthful definition, and for someone that is just starting, it is the scary one as well! Let’s break it down: - In simple words, it is a blueprint on how to solve a problem. Everyday example of an algorithm would be a cooking recipe. - This means that it uses some kind of loop (for programmers, for-loops or while-loops) to perform steps. Each step uses previously calculated values as an input for the current step. Now, one question rises, “What is our initial value?”. We will answer on this a bit later through examples. - It tries to find the best solutions according to some criteria leading to several alternative solutions, but only one is consider the best. - Gradient Descent is using first derivative of a criterion function (cost, loss) in order to find what is a better solution to the given problem. Hence, when we put everything together in simple words, we get the following: Gradient descent is a blueprint on how to find the best solution to a problem where more than one solution is acceptable. It uses a goal to determine how far we are from finding the best solution. Until this point we have everything clarified except the cost function. The cost is the indicator that we follow during the optimization process. Based on that indicator we can tell how far we are from the optimum of a function. One good example of the Cost is the Mean-Squared Error, which we have seen earlier in this book: \\[\\begin{equation*} \\textrm{MSE} = \\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i) \\end{equation*}\\] where: \\[\\begin{equation*} \\begin{cases} \\textrm{$\\hat{y}_i$ is the model prediction} \\\\ \\textrm{$y_i$ is the target (the actual value)} \\\\ \\textrm{$n$ is the number of samples in a dataset} \\end{cases} \\end{equation*}\\] Every algorithm that uses Gradient Descent as an optimization technique has parameters (weights) which are changing during the optimization process. When we say that we are looking for the minimum of the loss function, we actually mean we are looking for the values of the weights for which the loss has the lowest possible value. Accordingly, to answer our second question from the beginning, the technique that connects all the Machine Learning algorithms from Linear Regression to the most complicated neural networks is indeed, Gradient Descent. As we have seen, Gradient Descent is an optimization technique that helps us find the minimum of a cost function. Now let’s visualize it in the most intuitive way, like the following ball in a bowl (with little math sprinkle on top of it): Imagine this is a cross section of a bowl, inside which we drop a small red ball and let it find its way down to the bottom of the bowl. After some time it will stop rolling since it has found the sweet spot for it, at the bottom of the bowl. You can think about the Gradient Descent in the same way. It starts somewhere in the bowl (initial values of parameters) and tries to find the bottom of the bowl, or in other words, the minimum of a cost function. Let’s go through the example that is shown on the image above. The initial values of the parameters have set our ball at the position shown. Based on that we get some predictions, which we compare to our target values. The difference between these two sets will be our loss for the current set of parameters. Then we calculate the first derivative of the cost function, with respect to the parameters. This is where the name comes from. Here, this first derivative gives us the slope of the tangent to the curve where the ball is. If the slope is negative, like on the picture above, we take the next step to the right side. If the slope is positive we take the next step to the left side. The name thus comes from the fact that we always take the next step that points downhill, as represented in the following graphic: Now at this position our ball has a positive slope, so we have to take the next step to the left. Eventually, by repeating the same steps, the ball will end up at the bottom of the bowl: And that’s it! This is how Gradient Descent operates in one dimension (one parameter). Now you might ask: “Great, but how does this scale?” We saw an example of one dimensional optimization, what about two or even 3 dimensions? Excellent question. Gradient Descent guarantees that this approach scales on as many dimensions as needed, provided the cost function is convex. In fact, if the cost function is convex, Gradient Descent will find the absolute minimum of the cost function. Below is an example in 2 Dimensions: However if the cost function is not convex, it will only find a local minimum. Below is an example in 3 Dimensions: Now that we understand what Gradient Descent is all about, time to study the most advanced and most effective versions of it: “Gradient Descent”, “Batch Gradient Descent”, “Mini Batch Gradient Descent”, “Stochastic Gradient Descent”.. There are so many terms and someone who is just starting may found him/her very confused. The main difference across all of these versions of Gradient Descent is in the way we feed our data to a model, and how often we update our parameters (weights) to move our small red ball. Let’s start by explaining Batch Gradient Descent. Batch Gradient Descent is exactly what we did in Part 2 - Minimizing Costs, where remember we had a batch of inputs feeding the neural network, forward-propagating them to obtain in the end a batch of predictions, which themselves are compared to a batch of targets. The global loss error between the predictions and the targets of the two batches is then computed as the sum of the loss errors between each prediction and its associated target. That global loss is back-propagated into the neural network, where gradient descent or stochastic gradient descent is performed to update all the weights, according to how much they were responsible for that global loss error. In the next page below is an example of Batch Gradient Descent. The problem to solve is about predicting the score (from 0 to 100 %) students get at an exam, based on the time spent to study, and the time spent to sleep: An important thing to note on this graphic above is that these are not multiple neural networks, but a single one represented by separate weight updates. And again, as we can notice in this example of Batch Gradient Descent, we feed all of our data to the model at once. This will produce collective updates of the weights and fast optimization of the network. However, there is the bad side of this as well. There is once again the possibility to get stuck at a local minimum, as we can see in the next graphic below: The reason why this happens was explained a bit earlier: it is because the cost function in the graphic above is not convex. And this type of optimization (simple Gradient Descent) requires the cost function to be convex. If that is not the case we can find ourselves stuck in a local minimum and never find the global minimum having the optimal parameters. On the other hand, below is an example of a convex cost function, the same one as we saw earlier: In simple terms, a function is convex if it has only one global minimum. And the graph of a convex function has the bowl shape. However, in most of the problems, including the business problems, the cost function will not be convex (as in this same graphic example in 3D below), thus not allowing simple Gradient Descent to perform well. This is where Stochastic Gradient Descent comes into play. Stochastic Gradient Descent (SGD) comes to save the day. It indeed provides better results overall, preventing the algorithm to get stuck in a local minimum. However, as its name suggests, it is stochastic, or in other words, random. Because of this property, no matter how many times you run the algorithm, the process will always be slightly different. And that, regardless of the initialization. Stochastic Gradient Descent does not run on the whole dataset at once but instead input by input. Hence, the process goes like this: Let’s represent the three first iterations on the three first single inputs for this same example given earlier about predicting the scores at an exam: Each of the three graphics above is an example of one weights update ran by Stochastic Gradient Descent. As we can see, each time we only input a single row of observation from our dataset to the neural network, then we update the weights accordingly and proceed to the next input row of observation. At first glance, Stochastic Gradient Descent seems slower, because we input each row separately. But in reality, it is much faster because of the fact that we don’t have to load the whole dataset in the memory, nor to wait for whole dataset to pass through the model updating the weights. To finish this section, let’s recap on the difference between Batch Gradient Descent and Stochastic Gradient Descent, with the following graphic: Mini-Batch Gradient Descent is using the best from both worlds to combine Batch Gradient Descent with Stochastic Gradient Descent. This is done by feeding the neural network with batches of data instead of feeding single input rows of observations one by one or the whole dataset at once. This approach is faster than classical Stochastic Gradient Descent and prevents from getting stuck in the local minimum. This also helps when people don’t have enough computing resources to load the whole dataset in the memory, or enough processing power to get full benefit of Stochastic Gradient Descent. The optimizer is exactly the tool that will update the weights of the Neural Network through Stochastic Gradient Descent. Up to this point we have only mentioned the Adam optimizer (see Part 2 - Minimizing Costs), which is the most common optimizer used for the Deep Learning and Deep Reinforcement Learning models. Nevertheless there are a lot more optimizers which have their own benefits and applications. Let’s go through the most famous and widely used Gradient Descent optimizers. The classical Stochastic Gradient Descent has very big oscillations, which leaves room for improvement. The Momentum optimizer handles these big oscillations by adding fractions of the directions calculated in the previous step to the current step. This amplifies the speed of the current direction update. In the graphic just below we can see and compare the Classical SGD and the Momentum SGD in action: The benefits of the Momentum Optimizer are the following: But the Momentum Optimizer also has drawbacks, which are the following: Yuri Nesterov solved the momentum the overshot minimum problem by reversing the calculation order in the update formula: The idea of adapting our updates according to the slope of the error function, coming from the Nesterov optimizer, is taken and applied in the AdaGrad Optimizer while optimizing the learning rate as well. Hence, in the AdaGrad optimizer we have the same principle, not only applied on gradients but also on the learning rate. Here are the benefits of this optimizer: And here are the drawbacks: The AdaDelta Optimizer was invented to fix that decreasing learning rate issue of the AdaGrad Optimizer (first drawback). No need to get in further details, we just needed to introduce the AdaDelta optimizer and its particularity in order to understand the strength of the most widely used and most effective optimizer: the Adam Optimizer. The Adam Optimizer is an improvement over the AdaDelta Optimizer. The idea behind it is to store in a memory the momentum changes, as we calculate the learning rate for each parameter separately. Now remember the benefits of the Adam Optimizer, which are to be considered whenever building a Neural Network. Of course, this is the one we use when building the Artificial Brain of our AI in Part 2 - Minimizing the Costs. Let’s again provide the code that builds this artificial brain and notice, at the last line of code, the simplicity of selecting the Adam Optimizer: "],
["annex-2-three-extra-ai-models.html", "Parte 5 Annex 2: Three Extra AI Models", " Parte 5 Annex 2: Three Extra AI Models As a Bonus, in this section we provide three extra AI models, closer to the State of the Art. However, these AI models are not necessarily adapted to solve business problems, but more to solve specific tasks like playing games or training a virtual robot to walk. We are going to study three powerful models, including two in the Deep Reinforcement Learning branch of AI, and one in the Policy Gradient branch: In the previous section, our inputs were vectors encoded values defining the states of the environment. But since an encoded vector doesn’t preserve the spatial structure of an image, this is not the best form to describe a state. The spatial structure is indeed important because it gives us more information to predict the next state, and predicting the next state is of course essential for our AI to know what is the right next move. Therefore we need to preserve the spatial structure and to do that, our inputs must be 3D images (2D for the array of pixels plus one additional dimension for the colors). In that case, the inputs are simply the images of the screen itself, exactly like what a human sees when playing the game. Following this analogy, the AI acts like a human: it observes the input images of the screen when playing the game, the input images go into a convolutional neural network (the brain for a human) which will detect the state in each image. However, this convolutional neural network doesn’t contain pooling layers, because they would loose the location of the objects inside the image, and of course the AI need to keep track of the objects. Therefore we only keep the convolutional layers, and then by flattening them into a 1-dimensional vector, we get the input of our previous Deep Q-Learning network. Then the same process is being ran. Therefore in summary, Deep Convolutional Q-Learning is the same as Deep Q-Learning, with the only difference that the inputs are now images, and a Convolutional Neural Network is added at the beginning of the fully-connected Deep Q-Learning network to detect the states (or simply the objects) of the images. So far, the action played at each time has been the output of one neural network, as if only one agent was deciding the strategy to play the game. This will no longer be the case with A3C. This time, we are going to have several agents, each one interacting with its own copy of the environment. Let’s say there are \\(n\\) agents \\(A_1\\), \\(A_2\\),…, \\(A_n\\). Each agent is sharing two networks: the actor and the critic. The critic evaluates the present states, while the actor evaluates the possible values in the present state. The actor is used to make decisions. At each epoch time of training for on agent, it takes the last version of the shared networks and uses the actor during n steps in order to make a decision. Over the n steps, it collects all the observed new states, the values of these new states, the rewards, etc… After the n steps, the agent uses the collected observations in order to update the shared models. The times of epoch, and therefore the times of updates of the shared network by the agent are not synchronous, hence the name. That way, if an unlucky agent starts to be stuck into a suboptimal but attractive policy, it will reach out that state – because other agents also updated the shared policy before the agent got stuck – and will continue effective exploration. In order to explain the update rules of the actor and the critic, let us see the networks as functions that depend on vectors of parameters \\(\\theta\\) (for the actor) and \\(\\theta_v\\) (for the critic). The official A3C algorithm is the one of the Google DeepMind paper, “Asynchronous Methods for Deep Reinforcement Learning” (https://arxiv.org/pdf/1602.01783.pdf). In this paper you will find it in the following S3 algorithm: In this figure above we can clearly see the three As of the A3C: We want to build and train an AI that walks or runs across a field. The field is a flat ground that looks like this: On this same field you can see a Half-Cheetah. This will be one of the agents we will train to walk on this field. Both the field and the agent form what we call an environment, which belongs to PyBullet, the official Python Interface for the Bullet Physics SDK specialized for Robotics Simulation and Reinforcement Learning, built and developed by Erwin Coumans. For more info click . You can also check the GitHub page on this . The solution to our problem is a very recent AI model called , or . The related research paper was released by Horia Mania, Aurelia Guy and Benjamin Recht on March 20, 2018. You can find the full research paper . ARS is based on a specific branch of Artificial Intelligence called Evolution Strategies. The difference is that ES uses parallelized deep neural networks of several layers, while ARS uses a simple linear policy, which is a Perceptron (a shallow neural network of one layer composed of several neurones). ARS is also slightly similar to - , in the sense that ARS aims to optimize a policy (a function of the states returning the actions to play) that performs the best actions allowing the AI to walk. However the technique is different. If you are curious about , you can check out the research paper . Now let’s deep dive into the ARS. The whole picture is pretty simple. We have a policy, that takes as inputs the states of the environment, and returns as outputs the actions to play in order to walk and run across a field. Now before we start explaining the algorithm, let’s describe in more details the inputs, the outputs and the policy. The input is a vector encoding the states of the environment. What does it mean? First let’s explain what exactly is a state of the environment. A state is the exact situation happening at a specific time \\(t\\), e.g: We can see the cheetah in the air, back legs up, front legs bent, about to land on the ground. All this is encoded into a vector. How? By simply gathering enough values that can describe what is happening here. So the encoded vector will contain the coordinates of the angular points of the cheetah, as well as the angles of rotation around the rotors, and more values like the velocity. Therefore at each time \\(t\\), a vector of same format is encoding what is happening exactly in the environment. This encoded vector is what we call the input state of the environment, and will be the input of our policy that we will try to optimize. The output, returned by our policy, is a group of actions played by the agent. More precisely, these actions are the different muscles impulsions of the agent. For example, one of the actions will be the intensity of the muscle pushing the back leg at the level of the foot. What is important to understand here is more the fact that the policy is returning a as opposed to a single action. Indeed a common practice in Reinforcement Learning is to return one discreet action at each time \\(t\\). Here, not only we return a group of actions, but each of these actions is continuous. Indeed, in order for an agent to walk on a field, it has to move all the parts of its body at each time \\(t\\), as opposed to only one leg for example. And the actions are continuous because the impulsions of the muscles are measured by continuous metrics. Hence, the output is also a vector of several continuous values, just like the input state. Between the inputs and the outputs we have a policy, which is nothing else than a function, taking as inputs the input states, and returning as outputs the actions to play, i.e. the muscle impulsions. This policy will be linear, since indeed it will be a perceptron, which is a simple neural network of one layer and several neurones: The Hidden layer in the middle contains the different neurones of the perceptron. To each couple of (input value, output value) is attributed a weight. Therefore in total we have number_of_inputs \\(\\times\\) number_of_outputs weights. All these weights are gathered in a matrix, which is nothing else than the matrix of our linear policy. In this matrix, the rows correspond to the output values (the actions) and the columns correspond to the input values (of the states). Therefore this matrix of weights, called \\(\\Theta\\), is composed of \\(n = \\textrm{number\\_of\\_outputs}\\) rows and \\(m = \\textrm{number\\_of\\_inputs columns}\\): \\[\\begin{equation*} \\boldsymbol{\\Theta} = \\begin{pmatrix} (\\textrm{input 1, output 1}) &amp; (\\textrm{input 2, output 1}) &amp; \\cdots &amp; (\\textrm{input m, output 1}) \\\\ (\\textrm{input 1, output 2}) &amp; (\\textrm{input 2, output 2}) &amp; \\cdots &amp; (\\textrm{input m, output 2}) \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ (\\textrm{input 1, output n}) &amp; (\\textrm{input 2, output n}) &amp; \\cdots &amp; (\\textrm{input m, output n}) \\end{pmatrix} = \\begin{pmatrix} \\theta_{1,1} &amp; \\theta_{2,1} &amp; \\cdots &amp; \\theta_{m,1} \\\\ \\theta_{1,2} &amp; \\theta_{2,2} &amp; \\cdots &amp; \\theta_{m,2} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\theta_{1,n} &amp; \\theta_{2,n} &amp; \\cdots &amp; \\theta_{m,n} \\end{pmatrix} \\end{equation*}\\] At the very beginning, all the weights \\(\\theta_{i,j}\\) of our linear policy are initialized to zero: \\[\\begin{equation*} \\forall i,j \\in \\{1,n\\}\\times\\{1,m\\}, \\theta_{i,j} = 0 \\end{equation*}\\] Then, we are going to apply some very little perturbations to each of these weights, by adding some very small values \\(\\delta_{i,j}\\) to each of the \\(\\theta_{i,j}\\) in our matrix of weights: \\[\\begin{equation*} \\begin{pmatrix} \\theta_{1,1} &amp; \\theta_{2,1} &amp; \\cdots &amp; \\theta_{m,1} \\\\ \\theta_{1,2} &amp; \\theta_{2,2} &amp; \\cdots &amp; \\theta_{m,2} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\theta_{1,n} &amp; \\theta_{2,n} &amp; \\cdots &amp; \\theta_{m,n} \\end{pmatrix} \\longrightarrow \\begin{pmatrix} \\theta_{1,1} + \\delta_{1,1} &amp; \\theta_{2,1} + \\delta_{2,1} &amp; \\cdots &amp; \\theta_{m,1} + \\delta_{m,1} \\\\ \\theta_{1,2} + \\delta_{1,2} &amp; \\theta_{2,2} + \\delta_{2,2} &amp; \\cdots &amp; \\theta_{m,2} + \\delta_{m,1} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\theta_{1,n} + \\delta_{1,n} &amp; \\theta_{2,n} + \\delta_{2,n} &amp; \\cdots &amp; \\theta_{m,n} + \\delta_{m,n} \\end{pmatrix} \\end{equation*}\\] We will call this: “applying some perturbations in one ” \\(+\\Delta_k\\), where \\(\\Delta_k\\) is the following matrix of perturbations: \\[\\begin{equation*} \\Delta_k = \\begin{pmatrix} \\delta_{1,1} &amp; \\delta_{2,1} &amp; \\cdots &amp; \\delta_{m,1} \\\\ \\delta_{1,2} &amp; \\delta_{2,2} &amp; \\cdots &amp; \\delta_{m,2} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\delta_{1,n} &amp; \\delta_{2,n} &amp; \\cdots &amp; \\delta_{m,n} \\end{pmatrix} \\end{equation*}\\] “Positive” comes from the fact that we are the small values \\(\\delta_{i,j}\\) to our weights \\(\\theta_{i,j}\\). These little perturbations \\(\\delta_{i,j}\\) are sampled from a Gaussian distribution \\(\\mathcal{N}(0,\\sigma)\\) (the standard deviation \\(\\sigma\\) is what we call “noise” in the ARS model. And each time we do this, we are also going to apply the exact same perturbations \\(\\delta_{i,j}\\) to our weights \\(\\theta_{i,j}\\), but in the opposite direction \\(-\\Delta_k\\), by simply this time subtracting the exact same \\(\\delta_{i,j}\\): \\[\\begin{equation*} \\begin{pmatrix} \\theta_{1,1} &amp; \\theta_{2,1} &amp; \\cdots &amp; \\theta_{m,1} \\\\ \\theta_{1,2} &amp; \\theta_{2,2} &amp; \\cdots &amp; \\theta_{m,2} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\theta_{1,n} &amp; \\theta_{2,n} &amp; \\cdots &amp; \\theta_{m,n} \\end{pmatrix} \\longrightarrow \\begin{pmatrix} \\theta_{1,1} - \\delta_{1,1} &amp; \\theta_{2,1} - \\delta_{2,1} &amp; \\cdots &amp; \\theta_{m,1} - \\delta_{m,1} \\\\ \\theta_{1,2} - \\delta_{1,2} &amp; \\theta_{2,2} - \\delta_{2,2} &amp; \\cdots &amp; \\theta_{m,2} - \\delta_{m,1} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\theta_{1,n} - \\delta_{1,n} &amp; \\theta_{2,n} - \\delta_{2,n} &amp; \\cdots &amp; \\theta_{m,n} - \\delta_{m,n} \\end{pmatrix} \\end{equation*}\\] We will call this: “applying some perturbations in the ” \\(-\\Delta_k\\). Therefore in conclusion, we sample one specific matrix of perturbations \\(\\Delta_k\\) with some values \\(\\delta_{i,j}\\) close to zero and we update the weights of our matrix \\(\\Theta\\) in the positive direction \\(+ \\Delta_k\\) and the negative direction \\(- \\Delta_k\\): \\[\\begin{align*} \\textbf{Positive Direction: } &amp; \\Theta \\rightarrow \\Theta + \\Delta_k \\\\ \\textbf{Negative Direction: } &amp; \\Theta \\rightarrow \\Theta - \\Delta_k \\end{align*}\\] And in fact, over each full episode, we are going to apply these positive and negative perturbations for many different directions \\(\\Delta_1\\), \\(\\Delta_2\\), \\(\\Delta_3\\), etc. We will do this for 16 different directions: \\[\\begin{align*} \\textbf{Positive Directions: } &amp; \\Theta \\rightarrow \\Theta + \\Delta_1, \\ \\Theta \\rightarrow \\Theta + \\Delta_2, \\ ... \\ , \\ \\Theta \\rightarrow \\Theta + \\Delta_{16} \\\\ \\textbf{Negative Directions: } &amp; \\Theta \\rightarrow \\Theta - \\Delta_1, \\ \\Theta \\rightarrow \\Theta - \\Delta_2, \\ ... \\ , \\ \\Theta \\rightarrow \\Theta - \\Delta_{16} \\end{align*}\\] Now it is time to ask: why are we doing this? The reason is actually simple and intuitive to understand. We want to update the weights in these different directions to find the ones that will increase the most the total reward over the episodes. We want to figure out which updates of the weights will lead to the highest rewards. Indeed, increasing the total reward accumulated over the episode is our ultimate goal, since the higher is the reward, the better the agent will have the ability to walk. Now another question, less obvious: Why, for each direction, do we want to take the positive and the negative one? That is because, once we figure out the directions that increase the most the rewards (by simply getting the accumulated reward over the full episode for each direction and then sorting them by the highest obtained), we will do one step of gradient descent to update the weights in these best directions. However we don’t have any reward function of the weights, so we couldn’t apply gradient descent directly. Indeed, in order to apply gradient descent we would need to have a reward function of the weights, \\(r(\\Theta)\\), differentiate it with respect to the weights: \\[\\begin{equation*} \\frac{\\partial r(\\Theta)}{\\partial \\Theta} \\end{equation*}\\] and then do this one step of gradient descent to update the weights: \\[\\begin{equation*} \\Theta(\\textrm{new}) := \\Theta(\\textrm{old}) + \\frac{\\partial r(\\Theta)}{\\partial \\Theta} d \\Theta \\end{equation*}\\] But we cannot do that because we don’t have an explicit expression of the reward with respect to the weights. So instead of computing directly this gradient, we will approximate it. And that’s where the combo of positive &amp; negative directions comes into play, with the method of finite differences. So now we understand that we have to do one step of gradient descent to update the weights in the directions that increase the most the reward, and that to do this one step we have no choice but to approximate the gradient of the rewards with respect to the weights. More specifically, we have to approximate: \\[\\begin{equation*} \\frac{\\partial r(\\Theta)}{\\partial \\Theta} d \\Theta \\end{equation*}\\] Well with what we have done before applying the perturbations in the positive and negative directions, we will be able to approximate this easily. Since the value of each perturbation \\(\\delta\\) is a very small number close to zero, then the difference between the reward \\(r_{+}\\) we get when applying the perturbation in the positive direction (\\(\\Theta \\rightarrow \\Theta + \\Delta\\)) and the reward \\(r_{-}\\) we get when applying the perturbation in the negative (or opposite) direction (\\(\\Theta \\rightarrow \\Theta - \\Delta\\)) is approximately equal to that gradient: \\[\\begin{equation*} r_{+} - r_{-} \\approx \\frac{\\partial r(\\Theta)}{\\partial \\Theta} \\end{equation*}\\] so that we get the following approximation: \\[\\begin{equation*} (r_{+} - r_{-}) \\Delta \\approx \\frac{\\partial r(\\Theta)}{\\partial \\Theta} d \\Theta \\end{equation*}\\] This approximation is the result of the method of finite differences and allows us to do this one step of approximated gradient descent. Then we choose a number of best directions we want to keep as the ones leading to the highest rewards and we do this one step of approximated gradient descent on all these best directions. How do we know the top directions that increase the most the rewards? Well let’s say we want to keep 16 best directions, we simply apply the positive and negative perturbations for each of all our directions over one full episode, we store the couple of rewards \\((r_{+}, r_{-})\\) we get for each of these directions, and eventually we keep the 16 highest maximums of \\(r_{+}\\) and \\(r_{-}\\). These 16 highest rewards correspond to our 16 best directions. Then eventually we average our approximated gradients over those 16 best directions to update the whole matrix of weights \\(\\Theta\\): \\[\\begin{equation} \\Theta(\\textrm{new}) = \\Theta(\\textrm{old}) + \\frac{1}{16}\\sum_{k=1}^{16} [r_{+}(\\textrm{$k^{th}$ best direction}) - r_{-}(\\textrm{$k^{th}$ best direction})] \\Delta_{\\textrm{$k^{th}$ best direction}} \\end{equation}\\] Right after this update, the step of gradient descent is applied to the whole matrix of weights \\(\\Theta\\), so that the weights of our policy are updated into the top directions that increase the most the accumulated reward. Eventually, we repeat this whole process (apart from the initialization of the weights to zero) for a certain number of steps (e.g. 1000 steps). We can improve the performance of the ARS with the two following action items: Let’s have a look at each of these improvement solutions in the next page. In the , we have the options between and (see page 6). is the algorithm above without normalizing the input states, and is the ARS with normalized input states. Normalizing the states clearly improves the performance. We can scale by dividing the previous sum in equation (1) by the standard deviation \\(\\sigma_r\\) of the reward, so that we get: \\[\\begin{equation} \\Theta(\\textrm{new}) = \\Theta(\\textrm{old}) + \\frac{1}{16 \\sigma_r} \\sum_{k=1}^{16} [r_{+}(\\textrm{$k^{th}$ best direction}) - r_{-}(\\textrm{$k^{th}$ best direction})] \\Delta_{\\textrm{$k^{th}$ best direction}} \\end{equation}\\] For tuning purposes we can add a learning rate factor in equation (2) (denoted by \\(\\alpha\\) in the paper): \\[\\begin{equation*} \\Theta(\\textrm{new}) = \\Theta(\\textrm{old}) + \\frac{\\alpha}{16 \\sigma_r} \\sum_{k=1}^{16} [r_{+}(\\textrm{$k^{th}$ best direction}) - r_{-}(\\textrm{$k^{th}$ best direction})] \\Delta_{\\textrm{$k^{th}$ best direction}} \\end{equation*}\\] "],
["annex-3-questions-and-answers.html", "Parte 6 Annex 3: Questions and Answers", " Parte 6 Annex 3: Questions and Answers Simply put, the plan is the process of creating the environment of the input states, and the policy is the function that takes the input states defined by the plan as inputs and returns the actions to play as outputs. So in the case study, the whole process we do of defining the warehouse environment is our plan and the policy is our AI. Take a look at the following links as they might help give you some additional context: It is determined by the AI developer through experimenting. You try first with 1 (no discount), then you decrease a bit and observe if you get better results. And by repeating this you find an optimal value. More questions and their answer will be added here, as soon as relevant questions are asked within the course. You would use Argmax for not too complex problems (like business problems), and Softmax for complex problems like playing games or making a robot to walk. Indeed, for the complex problems you need to do some exploration vs exploitation, and that’s exactly what Softmax allows you to do. However, Business Problems are not too complex so you don’t need to do much exploration, and therefore an Argmax method is way sufficient. What we should do is start with some classical architectures that we find on papers (ImageNet, ResNet, Inception, MobileNets, etc.). Then we try, we see if we get good results, and if that’s the case we can stop there. For our DNN, we simply took a classic architecture, with 2 fully connected layers of 64 and 32 neurons, which turned out to work very well for our case study. Then we do prevent overfitting in the course by applying two different techniques. These allow us to improve the model, and thus, improve the score. These two techniques are: More questions and their answer will be added here, as soon as relevant questions are asked within the course. Let us assume that we have an experiment to select the strategy to be deployed on the customer 100 times (that is with 100 separate customers one after the other), and we compute the frequency of strategy selection. Then we repeat it again for another 100 times. And again for another 100 times. Hence we obtain many frequencies. If we repeat such frequency computations many times, for example 500 times, we can plot a histogram of these frequencies. By the Central Limit Theorem it will be bell-shaped, and its mean will be the mean of all frequencies we obtained over the experiment. Therefore in conclusion, on the x-axis we have the different possible values of these frequencies, and on the y-axis we have the number of times we obtained each frequency over the experiment. In this situation, 0 is loss, and 1 is gain, or win. The D5 is the best because it is skewed so we will have average outcomes close to 1, meaning that there we have more wins, or gains. And actually all casino machines nowadays are carefully programmed to have distribution like D1 or D3. But it is a good concrete example. The yellow mark is the best choice because it is the furthest from the origin on the x-axis, which therefore means that it has the highest estimated return. When doing Thompson Sampling, we can still perform updates in our algorithm (like making new guesses for the distributions with existing data, sampling from the guessed distribution, etc) while we are waiting for the results of an experiment in the real world. This would not hinder our algorithm from working. This is why it can accept delayed feedback. The most classic example is Conversion Rate Optimization. You have several ads od a same product and you want to know which one has the highest CTR. So you are going to do the same thing as we did with the strategies, except that this time the arms will be the ads. \\ Another potential application of Multi-armed bandits (MAB) can be the online testing of algorithms. \\ For example, let’s suppose you are running an e-commerce website and you have at your disposal several Machine Learning algorithms to provide recommendations to users (of whatever the website is selling), but you don’t know which algorithm leads to the best recommendations. \\ You could consider your problem as a MAB problem and define each Machine Learning algorithm as an “arm”: at each round when one user requests a recommendation, one arm (i.e. one of the algorithms) will be selected to make the recommendations, and you will receive a reward. In this case, you could define your reward in various ways, a simple example is “1” if the user clicks/buys an item and “0” otherwise. Eventually your bandit algorithm will converge and end up always choosing the algorithm which is the most efficient at providing recommendations. This is a good way to find the most suitable model in an online problem. \\ Another example coming to my mind is finding the best clinical treatment for patients: each possible treatment could be considered as an “arm”, and a simple way to define the reward would be a number between 0 (the treatment has no effect at all) and 1 (the patient is cured perfectly). \\ In this case, the goal is to find as quickly as possible the best treatment while minimizing the cumulative regret (which is equivalent to say you want to avoid as much as possible selecting “bad” or even sub-optimal treatments during the process). The best is the following: First, a data engineer makes a pipeline for reading data from the website and reacting to it in real time. Then a web visit triggers a response to recompute the parameters and to choose a strategy for the next time. More questions and their answer will be added here, as soon as relevant questions are asked within the course. "]
]
